
Exercises_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d4c  08002d4c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  08002d4c  08002d4c  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d4c  08002d4c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08002d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  200000dc  08002e30  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08002e30  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8f2  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f6  00000000  00000000  0002b9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018386  00000000  00000000  0002ef70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2bd  00000000  00000000  000472f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bb5  00000000  00000000  000545b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c4c  00000000  00000000  000db1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d10 	.word	0x08002d10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08002d10 	.word	0x08002d10

0800014c <display7SEG>:
int seg_pin[] = {a_Pin, b_Pin, c_Pin, d_Pin, e_Pin, f_Pin, g_Pin};
int seg_config[10] = {0x01, 0x4F, 0x12, 0x06, 0x4C, 0x24, 0x20, 0x0F, 0x00, 0x04};
// Hexadecimal to Binary: 0x01->0x00000001, 0x4F->01001111, ...

void display7SEG(int num)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	GPIOB->ODR = seg_config[num];
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <display7SEG+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <display7SEG+0x24>)
 800015e:	60da      	str	r2, [r3, #12]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000000 	.word	0x20000000
 8000170:	40010c00 	.word	0x40010c00

08000174 <update7SEG>:

const int MAX_LED = 4;
int led_buffer[4] = {1, 2, 3, 4};
void update7SEG(int index)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b03      	cmp	r3, #3
 8000180:	d82a      	bhi.n	80001d8 <update7SEG+0x64>
 8000182:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <update7SEG+0x14>)
 8000184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000188:	08000199 	.word	0x08000199
 800018c:	080001a9 	.word	0x080001a9
 8000190:	080001b9 	.word	0x080001b9
 8000194:	080001c9 	.word	0x080001c9
    switch (index)
    {
        case 0:
            //Display the first 7SEG with led_buffer[0]
    		display7SEG(led_buffer[index]);
 8000198:	4a15      	ldr	r2, [pc, #84]	; (80001f0 <update7SEG+0x7c>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f7ff ffd3 	bl	800014c <display7SEG>
            break;
 80001a6:	e018      	b.n	80001da <update7SEG+0x66>
        case 1:
            //Display the second 7SEG with led_buffer[1]
    		display7SEG(led_buffer[index]);
 80001a8:	4a11      	ldr	r2, [pc, #68]	; (80001f0 <update7SEG+0x7c>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f7ff ffcb 	bl	800014c <display7SEG>
            break;
 80001b6:	e010      	b.n	80001da <update7SEG+0x66>
        case 2:
            //Display the third 7SEG with led_buffer[2]
    		display7SEG(led_buffer[index]);
 80001b8:	4a0d      	ldr	r2, [pc, #52]	; (80001f0 <update7SEG+0x7c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <display7SEG>
            break;
 80001c6:	e008      	b.n	80001da <update7SEG+0x66>
        case 3:
            //Display the forth 7SEG with led_buffer[3]
    		display7SEG(led_buffer[index]);
 80001c8:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <update7SEG+0x7c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffbb 	bl	800014c <display7SEG>
            break;
 80001d6:	e000      	b.n	80001da <update7SEG+0x66>
        default:
            break;
 80001d8:	bf00      	nop
    }
	if(seg_index >= 4) seg_index = 0;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <update7SEG+0x80>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b03      	cmp	r3, #3
 80001e0:	dd02      	ble.n	80001e8 <update7SEG+0x74>
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <update7SEG+0x80>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	200000f8 	.word	0x200000f8

080001f8 <updateBufferForMode1>:

void updateBufferForMode1()
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	int Hori_Road = (Current_Timer_Counter(0)) / 100;
 80001fe:	2000      	movs	r0, #0
 8000200:	f001 f84c 	bl	800129c <Current_Timer_Counter>
 8000204:	4603      	mov	r3, r0
 8000206:	4a24      	ldr	r2, [pc, #144]	; (8000298 <updateBufferForMode1+0xa0>)
 8000208:	fb82 1203 	smull	r1, r2, r2, r3
 800020c:	1152      	asrs	r2, r2, #5
 800020e:	17db      	asrs	r3, r3, #31
 8000210:	1ad3      	subs	r3, r2, r3
 8000212:	607b      	str	r3, [r7, #4]
	int Verti_road = (Current_Timer_Counter(1)) / 100;
 8000214:	2001      	movs	r0, #1
 8000216:	f001 f841 	bl	800129c <Current_Timer_Counter>
 800021a:	4603      	mov	r3, r0
 800021c:	4a1e      	ldr	r2, [pc, #120]	; (8000298 <updateBufferForMode1+0xa0>)
 800021e:	fb82 1203 	smull	r1, r2, r2, r3
 8000222:	1152      	asrs	r2, r2, #5
 8000224:	17db      	asrs	r3, r3, #31
 8000226:	1ad3      	subs	r3, r2, r3
 8000228:	603b      	str	r3, [r7, #0]

	led_buffer[0] = (Hori_Road + 1)/ 10;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3301      	adds	r3, #1
 800022e:	4a1b      	ldr	r2, [pc, #108]	; (800029c <updateBufferForMode1+0xa4>)
 8000230:	fb82 1203 	smull	r1, r2, r2, r3
 8000234:	1092      	asrs	r2, r2, #2
 8000236:	17db      	asrs	r3, r3, #31
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <updateBufferForMode1+0xa8>)
 800023c:	6013      	str	r3, [r2, #0]
	led_buffer[1] = (Hori_Road + 1) % 10;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	1c59      	adds	r1, r3, #1
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <updateBufferForMode1+0xa4>)
 8000244:	fb83 2301 	smull	r2, r3, r3, r1
 8000248:	109a      	asrs	r2, r3, #2
 800024a:	17cb      	asrs	r3, r1, #31
 800024c:	1ad2      	subs	r2, r2, r3
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	1aca      	subs	r2, r1, r3
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <updateBufferForMode1+0xa8>)
 800025a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = (Verti_road + 1) / 10;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	3301      	adds	r3, #1
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <updateBufferForMode1+0xa4>)
 8000262:	fb82 1203 	smull	r1, r2, r2, r3
 8000266:	1092      	asrs	r2, r2, #2
 8000268:	17db      	asrs	r3, r3, #31
 800026a:	1ad3      	subs	r3, r2, r3
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <updateBufferForMode1+0xa8>)
 800026e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = (Verti_road + 1) % 10;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	1c59      	adds	r1, r3, #1
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <updateBufferForMode1+0xa4>)
 8000276:	fb83 2301 	smull	r2, r3, r3, r1
 800027a:	109a      	asrs	r2, r3, #2
 800027c:	17cb      	asrs	r3, r1, #31
 800027e:	1ad2      	subs	r2, r2, r3
 8000280:	4613      	mov	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	1aca      	subs	r2, r1, r3
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <updateBufferForMode1+0xa8>)
 800028c:	60da      	str	r2, [r3, #12]
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	51eb851f 	.word	0x51eb851f
 800029c:	66666667 	.word	0x66666667
 80002a0:	20000028 	.word	0x20000028

080002a4 <updateBufferForIncVal>:

void updateBufferForIncVal()
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	led_buffer[2] = count_val / 10;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <updateBufferForIncVal+0x74>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1b      	ldr	r2, [pc, #108]	; (800031c <updateBufferForIncVal+0x78>)
 80002ae:	fb82 1203 	smull	r1, r2, r2, r3
 80002b2:	1092      	asrs	r2, r2, #2
 80002b4:	17db      	asrs	r3, r3, #31
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	4a19      	ldr	r2, [pc, #100]	; (8000320 <updateBufferForIncVal+0x7c>)
 80002ba:	6093      	str	r3, [r2, #8]
	led_buffer[3] = count_val % 10;
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <updateBufferForIncVal+0x74>)
 80002be:	6819      	ldr	r1, [r3, #0]
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <updateBufferForIncVal+0x78>)
 80002c2:	fb83 2301 	smull	r2, r3, r3, r1
 80002c6:	109a      	asrs	r2, r3, #2
 80002c8:	17cb      	asrs	r3, r1, #31
 80002ca:	1ad2      	subs	r2, r2, r3
 80002cc:	4613      	mov	r3, r2
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	4413      	add	r3, r2
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	1aca      	subs	r2, r1, r3
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <updateBufferForIncVal+0x7c>)
 80002d8:	60da      	str	r2, [r3, #12]

	led_buffer[0] = 0;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <updateBufferForIncVal+0x7c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
	switch(mode)
 80002e0:	4b10      	ldr	r3, [pc, #64]	; (8000324 <updateBufferForIncVal+0x80>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b0c      	cmp	r3, #12
 80002e6:	d00e      	beq.n	8000306 <updateBufferForIncVal+0x62>
 80002e8:	2b0c      	cmp	r3, #12
 80002ea:	dc10      	bgt.n	800030e <updateBufferForIncVal+0x6a>
 80002ec:	2b0a      	cmp	r3, #10
 80002ee:	d002      	beq.n	80002f6 <updateBufferForIncVal+0x52>
 80002f0:	2b0b      	cmp	r3, #11
 80002f2:	d004      	beq.n	80002fe <updateBufferForIncVal+0x5a>
			break;
		case MODE_4:
			led_buffer[1] = 4;
			break;
		default:
			break;
 80002f4:	e00b      	b.n	800030e <updateBufferForIncVal+0x6a>
			led_buffer[1] = 2;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <updateBufferForIncVal+0x7c>)
 80002f8:	2202      	movs	r2, #2
 80002fa:	605a      	str	r2, [r3, #4]
			break;
 80002fc:	e008      	b.n	8000310 <updateBufferForIncVal+0x6c>
			led_buffer[1] = 3;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <updateBufferForIncVal+0x7c>)
 8000300:	2203      	movs	r2, #3
 8000302:	605a      	str	r2, [r3, #4]
			break;
 8000304:	e004      	b.n	8000310 <updateBufferForIncVal+0x6c>
			led_buffer[1] = 4;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <updateBufferForIncVal+0x7c>)
 8000308:	2204      	movs	r2, #4
 800030a:	605a      	str	r2, [r3, #4]
			break;
 800030c:	e000      	b.n	8000310 <updateBufferForIncVal+0x6c>
			break;
 800030e:	bf00      	nop
	}
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	200000fc 	.word	0x200000fc
 800031c:	66666667 	.word	0x66666667
 8000320:	20000028 	.word	0x20000028
 8000324:	20000048 	.word	0x20000048

08000328 <fsmIncVal>:

void fsmIncVal(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	switch (mode)
 800032c:	4b9a      	ldr	r3, [pc, #616]	; (8000598 <fsmIncVal+0x270>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b0f      	cmp	r3, #15
 8000332:	d063      	beq.n	80003fc <fsmIncVal+0xd4>
 8000334:	2b0f      	cmp	r3, #15
 8000336:	f300 808f 	bgt.w	8000458 <fsmIncVal+0x130>
 800033a:	2b0d      	cmp	r3, #13
 800033c:	d002      	beq.n	8000344 <fsmIncVal+0x1c>
 800033e:	2b0e      	cmp	r3, #14
 8000340:	d02e      	beq.n	80003a0 <fsmIncVal+0x78>
				if (count_val > 99) count_val = 0;
				count_val++;
			}
			break;
		default:
			break;
 8000342:	e089      	b.n	8000458 <fsmIncVal+0x130>
			updateBufferForIncVal();
 8000344:	f7ff ffae 	bl	80002a4 <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_1))
 8000348:	2000      	movs	r0, #0
 800034a:	f000 fa93 	bl	8000874 <isButtonPressed>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <fsmIncVal+0x32>
				mode = MODE_3;
 8000354:	4b90      	ldr	r3, [pc, #576]	; (8000598 <fsmIncVal+0x270>)
 8000356:	220b      	movs	r2, #11
 8000358:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3))
 800035a:	2002      	movs	r0, #2
 800035c:	f000 fa8a 	bl	8000874 <isButtonPressed>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d009      	beq.n	800037a <fsmIncVal+0x52>
				mode = MODE_2;
 8000366:	4b8c      	ldr	r3, [pc, #560]	; (8000598 <fsmIncVal+0x270>)
 8000368:	220a      	movs	r2, #10
 800036a:	601a      	str	r2, [r3, #0]
				RED = count_val * 100;
 800036c:	4b8b      	ldr	r3, [pc, #556]	; (800059c <fsmIncVal+0x274>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2264      	movs	r2, #100	; 0x64
 8000372:	fb02 f303 	mul.w	r3, r2, r3
 8000376:	4a8a      	ldr	r2, [pc, #552]	; (80005a0 <fsmIncVal+0x278>)
 8000378:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2))
 800037a:	2001      	movs	r0, #1
 800037c:	f000 fa7a 	bl	8000874 <isButtonPressed>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d06a      	beq.n	800045c <fsmIncVal+0x134>
				if (count_val > 99) count_val = 0;
 8000386:	4b85      	ldr	r3, [pc, #532]	; (800059c <fsmIncVal+0x274>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2b63      	cmp	r3, #99	; 0x63
 800038c:	dd02      	ble.n	8000394 <fsmIncVal+0x6c>
 800038e:	4b83      	ldr	r3, [pc, #524]	; (800059c <fsmIncVal+0x274>)
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
				count_val++;
 8000394:	4b81      	ldr	r3, [pc, #516]	; (800059c <fsmIncVal+0x274>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3301      	adds	r3, #1
 800039a:	4a80      	ldr	r2, [pc, #512]	; (800059c <fsmIncVal+0x274>)
 800039c:	6013      	str	r3, [r2, #0]
			break;
 800039e:	e05d      	b.n	800045c <fsmIncVal+0x134>
			updateBufferForIncVal();
 80003a0:	f7ff ff80 	bl	80002a4 <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_1))
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 fa65 	bl	8000874 <isButtonPressed>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <fsmIncVal+0x8e>
				mode = MODE_4;
 80003b0:	4b79      	ldr	r3, [pc, #484]	; (8000598 <fsmIncVal+0x270>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3))
 80003b6:	2002      	movs	r0, #2
 80003b8:	f000 fa5c 	bl	8000874 <isButtonPressed>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d009      	beq.n	80003d6 <fsmIncVal+0xae>
				mode = MODE_3;
 80003c2:	4b75      	ldr	r3, [pc, #468]	; (8000598 <fsmIncVal+0x270>)
 80003c4:	220b      	movs	r2, #11
 80003c6:	601a      	str	r2, [r3, #0]
				AMBER = count_val * 100;
 80003c8:	4b74      	ldr	r3, [pc, #464]	; (800059c <fsmIncVal+0x274>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2264      	movs	r2, #100	; 0x64
 80003ce:	fb02 f303 	mul.w	r3, r2, r3
 80003d2:	4a74      	ldr	r2, [pc, #464]	; (80005a4 <fsmIncVal+0x27c>)
 80003d4:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2))
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 fa4c 	bl	8000874 <isButtonPressed>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d03e      	beq.n	8000460 <fsmIncVal+0x138>
				if (count_val > 99) count_val = 0;
 80003e2:	4b6e      	ldr	r3, [pc, #440]	; (800059c <fsmIncVal+0x274>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2b63      	cmp	r3, #99	; 0x63
 80003e8:	dd02      	ble.n	80003f0 <fsmIncVal+0xc8>
 80003ea:	4b6c      	ldr	r3, [pc, #432]	; (800059c <fsmIncVal+0x274>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
				count_val++;
 80003f0:	4b6a      	ldr	r3, [pc, #424]	; (800059c <fsmIncVal+0x274>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a69      	ldr	r2, [pc, #420]	; (800059c <fsmIncVal+0x274>)
 80003f8:	6013      	str	r3, [r2, #0]
			break;
 80003fa:	e031      	b.n	8000460 <fsmIncVal+0x138>
			updateBufferForIncVal();
 80003fc:	f7ff ff52 	bl	80002a4 <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_1))
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fa37 	bl	8000874 <isButtonPressed>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d002      	beq.n	8000412 <fsmIncVal+0xea>
				mode = MODE_1;
 800040c:	4b62      	ldr	r3, [pc, #392]	; (8000598 <fsmIncVal+0x270>)
 800040e:	2209      	movs	r2, #9
 8000410:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3))
 8000412:	2002      	movs	r0, #2
 8000414:	f000 fa2e 	bl	8000874 <isButtonPressed>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d009      	beq.n	8000432 <fsmIncVal+0x10a>
				mode = MODE_4;
 800041e:	4b5e      	ldr	r3, [pc, #376]	; (8000598 <fsmIncVal+0x270>)
 8000420:	220c      	movs	r2, #12
 8000422:	601a      	str	r2, [r3, #0]
				AMBER = count_val * 100;
 8000424:	4b5d      	ldr	r3, [pc, #372]	; (800059c <fsmIncVal+0x274>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2264      	movs	r2, #100	; 0x64
 800042a:	fb02 f303 	mul.w	r3, r2, r3
 800042e:	4a5d      	ldr	r2, [pc, #372]	; (80005a4 <fsmIncVal+0x27c>)
 8000430:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2))
 8000432:	2001      	movs	r0, #1
 8000434:	f000 fa1e 	bl	8000874 <isButtonPressed>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d012      	beq.n	8000464 <fsmIncVal+0x13c>
				if (count_val > 99) count_val = 0;
 800043e:	4b57      	ldr	r3, [pc, #348]	; (800059c <fsmIncVal+0x274>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b63      	cmp	r3, #99	; 0x63
 8000444:	dd02      	ble.n	800044c <fsmIncVal+0x124>
 8000446:	4b55      	ldr	r3, [pc, #340]	; (800059c <fsmIncVal+0x274>)
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
				count_val++;
 800044c:	4b53      	ldr	r3, [pc, #332]	; (800059c <fsmIncVal+0x274>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3301      	adds	r3, #1
 8000452:	4a52      	ldr	r2, [pc, #328]	; (800059c <fsmIncVal+0x274>)
 8000454:	6013      	str	r3, [r2, #0]
			break;
 8000456:	e005      	b.n	8000464 <fsmIncVal+0x13c>
			break;
 8000458:	bf00      	nop
 800045a:	e004      	b.n	8000466 <fsmIncVal+0x13e>
			break;
 800045c:	bf00      	nop
 800045e:	e002      	b.n	8000466 <fsmIncVal+0x13e>
			break;
 8000460:	bf00      	nop
 8000462:	e000      	b.n	8000466 <fsmIncVal+0x13e>
			break;
 8000464:	bf00      	nop
	}

	if(RED > RED_INIT)
 8000466:	4b4e      	ldr	r3, [pc, #312]	; (80005a0 <fsmIncVal+0x278>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b4f      	ldr	r3, [pc, #316]	; (80005a8 <fsmIncVal+0x280>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	429a      	cmp	r2, r3
 8000470:	dd18      	ble.n	80004a4 <fsmIncVal+0x17c>
	{
		AMBER = AMBER * (RED / RED_INIT);
 8000472:	4b4b      	ldr	r3, [pc, #300]	; (80005a0 <fsmIncVal+0x278>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b4c      	ldr	r3, [pc, #304]	; (80005a8 <fsmIncVal+0x280>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	fb92 f3f3 	sdiv	r3, r2, r3
 800047e:	4a49      	ldr	r2, [pc, #292]	; (80005a4 <fsmIncVal+0x27c>)
 8000480:	6812      	ldr	r2, [r2, #0]
 8000482:	fb02 f303 	mul.w	r3, r2, r3
 8000486:	4a47      	ldr	r2, [pc, #284]	; (80005a4 <fsmIncVal+0x27c>)
 8000488:	6013      	str	r3, [r2, #0]
		GREEN = GREEN * (RED / RED_INIT);
 800048a:	4b45      	ldr	r3, [pc, #276]	; (80005a0 <fsmIncVal+0x278>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	4b46      	ldr	r3, [pc, #280]	; (80005a8 <fsmIncVal+0x280>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	fb92 f3f3 	sdiv	r3, r2, r3
 8000496:	4a45      	ldr	r2, [pc, #276]	; (80005ac <fsmIncVal+0x284>)
 8000498:	6812      	ldr	r2, [r2, #0]
 800049a:	fb02 f303 	mul.w	r3, r2, r3
 800049e:	4a43      	ldr	r2, [pc, #268]	; (80005ac <fsmIncVal+0x284>)
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	e0a7      	b.n	80005f4 <fsmIncVal+0x2cc>
	}
	else if(AMBER > AMBER_INIT)
 80004a4:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <fsmIncVal+0x27c>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b41      	ldr	r3, [pc, #260]	; (80005b0 <fsmIncVal+0x288>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dd18      	ble.n	80004e2 <fsmIncVal+0x1ba>
	{
		RED = RED * (AMBER / AMBER_INIT);
 80004b0:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <fsmIncVal+0x27c>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b3e      	ldr	r3, [pc, #248]	; (80005b0 <fsmIncVal+0x288>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004bc:	4a38      	ldr	r2, [pc, #224]	; (80005a0 <fsmIncVal+0x278>)
 80004be:	6812      	ldr	r2, [r2, #0]
 80004c0:	fb02 f303 	mul.w	r3, r2, r3
 80004c4:	4a36      	ldr	r2, [pc, #216]	; (80005a0 <fsmIncVal+0x278>)
 80004c6:	6013      	str	r3, [r2, #0]
		GREEN = GREEN * (AMBER / AMBER_INIT);
 80004c8:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <fsmIncVal+0x27c>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <fsmIncVal+0x288>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80004d4:	4a35      	ldr	r2, [pc, #212]	; (80005ac <fsmIncVal+0x284>)
 80004d6:	6812      	ldr	r2, [r2, #0]
 80004d8:	fb02 f303 	mul.w	r3, r2, r3
 80004dc:	4a33      	ldr	r2, [pc, #204]	; (80005ac <fsmIncVal+0x284>)
 80004de:	6013      	str	r3, [r2, #0]
 80004e0:	e088      	b.n	80005f4 <fsmIncVal+0x2cc>
	}
	else if(GREEN > GREEN_INIT)
 80004e2:	4b32      	ldr	r3, [pc, #200]	; (80005ac <fsmIncVal+0x284>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <fsmIncVal+0x28c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dd18      	ble.n	8000520 <fsmIncVal+0x1f8>
	{
		RED = RED * (GREEN / GREEN_INIT);
 80004ee:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <fsmIncVal+0x284>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <fsmIncVal+0x28c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80004fa:	4a29      	ldr	r2, [pc, #164]	; (80005a0 <fsmIncVal+0x278>)
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <fsmIncVal+0x278>)
 8000504:	6013      	str	r3, [r2, #0]
		AMBER = AMBER * (GREEN / GREEN_INIT);
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <fsmIncVal+0x284>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <fsmIncVal+0x28c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000512:	4a24      	ldr	r2, [pc, #144]	; (80005a4 <fsmIncVal+0x27c>)
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <fsmIncVal+0x27c>)
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	e069      	b.n	80005f4 <fsmIncVal+0x2cc>
	}
	else if(RED < RED_INIT)
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <fsmIncVal+0x278>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <fsmIncVal+0x280>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	da18      	bge.n	800055e <fsmIncVal+0x236>
	{
		AMBER = (RED / 5) * 2;
 800052c:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <fsmIncVal+0x278>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <fsmIncVal+0x290>)
 8000532:	fb82 1203 	smull	r1, r2, r2, r3
 8000536:	1052      	asrs	r2, r2, #1
 8000538:	17db      	asrs	r3, r3, #31
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <fsmIncVal+0x27c>)
 8000540:	6013      	str	r3, [r2, #0]
		GREEN = (RED / 5) * 3;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <fsmIncVal+0x278>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a1c      	ldr	r2, [pc, #112]	; (80005b8 <fsmIncVal+0x290>)
 8000548:	fb82 1203 	smull	r1, r2, r2, r3
 800054c:	1052      	asrs	r2, r2, #1
 800054e:	17db      	asrs	r3, r3, #31
 8000550:	1ad2      	subs	r2, r2, r3
 8000552:	4613      	mov	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4413      	add	r3, r2
 8000558:	4a14      	ldr	r2, [pc, #80]	; (80005ac <fsmIncVal+0x284>)
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	e04a      	b.n	80005f4 <fsmIncVal+0x2cc>
	}
	else if(AMBER < AMBER_INIT)
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <fsmIncVal+0x27c>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <fsmIncVal+0x288>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	da28      	bge.n	80005bc <fsmIncVal+0x294>
	{
		RED = (AMBER / 2) * 5;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <fsmIncVal+0x27c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	0fda      	lsrs	r2, r3, #31
 8000570:	4413      	add	r3, r2
 8000572:	105b      	asrs	r3, r3, #1
 8000574:	461a      	mov	r2, r3
 8000576:	4613      	mov	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	4413      	add	r3, r2
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <fsmIncVal+0x278>)
 800057e:	6013      	str	r3, [r2, #0]
		GREEN = (AMBER / 2) * 3;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <fsmIncVal+0x27c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	0fda      	lsrs	r2, r3, #31
 8000586:	4413      	add	r3, r2
 8000588:	105b      	asrs	r3, r3, #1
 800058a:	461a      	mov	r2, r3
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <fsmIncVal+0x284>)
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	e02d      	b.n	80005f4 <fsmIncVal+0x2cc>
 8000598:	20000048 	.word	0x20000048
 800059c:	200000fc 	.word	0x200000fc
 80005a0:	2000004c 	.word	0x2000004c
 80005a4:	20000050 	.word	0x20000050
 80005a8:	20000058 	.word	0x20000058
 80005ac:	20000054 	.word	0x20000054
 80005b0:	2000005c 	.word	0x2000005c
 80005b4:	20000060 	.word	0x20000060
 80005b8:	66666667 	.word	0x66666667
	}
	else if(GREEN < GREEN_INIT)
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <fsmIncVal+0x2e8>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <fsmIncVal+0x2ec>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	da15      	bge.n	80005f4 <fsmIncVal+0x2cc>
	{
		RED = (GREEN / 3) * 5;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <fsmIncVal+0x2e8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <fsmIncVal+0x2f0>)
 80005ce:	fb82 1203 	smull	r1, r2, r2, r3
 80005d2:	17db      	asrs	r3, r3, #31
 80005d4:	1ad2      	subs	r2, r2, r3
 80005d6:	4613      	mov	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4413      	add	r3, r2
 80005dc:	4a0f      	ldr	r2, [pc, #60]	; (800061c <fsmIncVal+0x2f4>)
 80005de:	6013      	str	r3, [r2, #0]
		AMBER = (GREEN / 3) * 2;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <fsmIncVal+0x2e8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <fsmIncVal+0x2f0>)
 80005e6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ea:	17db      	asrs	r3, r3, #31
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <fsmIncVal+0x2f8>)
 80005f2:	6013      	str	r3, [r2, #0]
	}
	RED_INIT = RED;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <fsmIncVal+0x2f4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <fsmIncVal+0x2fc>)
 80005fa:	6013      	str	r3, [r2, #0]
	AMBER_INIT = AMBER;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <fsmIncVal+0x2f8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <fsmIncVal+0x300>)
 8000602:	6013      	str	r3, [r2, #0]
	GREEN_INIT = GREEN;
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <fsmIncVal+0x2e8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a02      	ldr	r2, [pc, #8]	; (8000614 <fsmIncVal+0x2ec>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000054 	.word	0x20000054
 8000614:	20000060 	.word	0x20000060
 8000618:	55555556 	.word	0x55555556
 800061c:	2000004c 	.word	0x2000004c
 8000620:	20000050 	.word	0x20000050
 8000624:	20000058 	.word	0x20000058
 8000628:	2000005c 	.word	0x2000005c

0800062c <fsm_Hori_LEDs>:
int Hori_Status = AUTO_INIT;
int Verti_Status = AUTO_INIT;
//GPIO_PinState Blink_Status = LED_ON;

void fsm_Hori_LEDs()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	switch(Hori_Status)
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <fsm_Hori_LEDs+0xac>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3b10      	subs	r3, #16
 8000636:	2b03      	cmp	r3, #3
 8000638:	d844      	bhi.n	80006c4 <fsm_Hori_LEDs+0x98>
 800063a:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <fsm_Hori_LEDs+0x14>)
 800063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000640:	08000651 	.word	0x08000651
 8000644:	08000665 	.word	0x08000665
 8000648:	08000685 	.word	0x08000685
 800064c:	080006a5 	.word	0x080006a5
	{
		case AUTO_INIT:
			Hori_Status = AUTO_RED;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <fsm_Hori_LEDs+0xac>)
 8000652:	2211      	movs	r2, #17
 8000654:	601a      	str	r2, [r3, #0]
			setTimer(0, RED);
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <fsm_Hori_LEDs+0xb0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fe41 	bl	80012e4 <setTimer>
			break;
 8000662:	e036      	b.n	80006d2 <fsm_Hori_LEDs+0xa6>

		case AUTO_RED:
			if (IsTimerUp(0))
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fe29 	bl	80012bc <IsTimerUp>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d02b      	beq.n	80006c8 <fsm_Hori_LEDs+0x9c>
			{
				Hori_Status = AUTO_GREEN;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <fsm_Hori_LEDs+0xac>)
 8000672:	2212      	movs	r2, #18
 8000674:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN);
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <fsm_Hori_LEDs+0xb4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4619      	mov	r1, r3
 800067c:	2000      	movs	r0, #0
 800067e:	f000 fe31 	bl	80012e4 <setTimer>
			}
			break;
 8000682:	e021      	b.n	80006c8 <fsm_Hori_LEDs+0x9c>

		case AUTO_GREEN:
			if (IsTimerUp(0))
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fe19 	bl	80012bc <IsTimerUp>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d01d      	beq.n	80006cc <fsm_Hori_LEDs+0xa0>
			{
				Hori_Status = AUTO_AMBER;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <fsm_Hori_LEDs+0xac>)
 8000692:	2213      	movs	r2, #19
 8000694:	601a      	str	r2, [r3, #0]
				setTimer(0, AMBER);
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <fsm_Hori_LEDs+0xb8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fe21 	bl	80012e4 <setTimer>
			}
			break;
 80006a2:	e013      	b.n	80006cc <fsm_Hori_LEDs+0xa0>

		case AUTO_AMBER:
			if (IsTimerUp(0))
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 fe09 	bl	80012bc <IsTimerUp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00f      	beq.n	80006d0 <fsm_Hori_LEDs+0xa4>
			{
				Hori_Status = AUTO_RED;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <fsm_Hori_LEDs+0xac>)
 80006b2:	2211      	movs	r2, #17
 80006b4:	601a      	str	r2, [r3, #0]
				setTimer(0, RED);
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <fsm_Hori_LEDs+0xb0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 fe11 	bl	80012e4 <setTimer>
			}
			break;
 80006c2:	e005      	b.n	80006d0 <fsm_Hori_LEDs+0xa4>

		default:
			break;
 80006c4:	bf00      	nop
 80006c6:	e004      	b.n	80006d2 <fsm_Hori_LEDs+0xa6>
			break;
 80006c8:	bf00      	nop
 80006ca:	e002      	b.n	80006d2 <fsm_Hori_LEDs+0xa6>
			break;
 80006cc:	bf00      	nop
 80006ce:	e000      	b.n	80006d2 <fsm_Hori_LEDs+0xa6>
			break;
 80006d0:	bf00      	nop
	}
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000038 	.word	0x20000038
 80006dc:	2000004c 	.word	0x2000004c
 80006e0:	20000054 	.word	0x20000054
 80006e4:	20000050 	.word	0x20000050

080006e8 <fsm_Verti_LEDs>:

void fsm_Verti_LEDs()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	switch (Verti_Status)
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <fsm_Verti_LEDs+0xac>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b10      	subs	r3, #16
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d844      	bhi.n	8000780 <fsm_Verti_LEDs+0x98>
 80006f6:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <fsm_Verti_LEDs+0x14>)
 80006f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	08000761 	.word	0x08000761
 8000704:	08000721 	.word	0x08000721
 8000708:	08000741 	.word	0x08000741
	{
		case AUTO_INIT:
			Verti_Status = AUTO_GREEN;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <fsm_Verti_LEDs+0xac>)
 800070e:	2212      	movs	r2, #18
 8000710:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN);
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <fsm_Verti_LEDs+0xb0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fde3 	bl	80012e4 <setTimer>
			break;
 800071e:	e036      	b.n	800078e <fsm_Verti_LEDs+0xa6>

		case AUTO_GREEN:
			if (IsTimerUp(1))
 8000720:	2001      	movs	r0, #1
 8000722:	f000 fdcb 	bl	80012bc <IsTimerUp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d02b      	beq.n	8000784 <fsm_Verti_LEDs+0x9c>
			{
				Verti_Status = AUTO_AMBER;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <fsm_Verti_LEDs+0xac>)
 800072e:	2213      	movs	r2, #19
 8000730:	601a      	str	r2, [r3, #0]
				setTimer(1, AMBER);
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <fsm_Verti_LEDs+0xb4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4619      	mov	r1, r3
 8000738:	2001      	movs	r0, #1
 800073a:	f000 fdd3 	bl	80012e4 <setTimer>
			}
			break;
 800073e:	e021      	b.n	8000784 <fsm_Verti_LEDs+0x9c>

		case AUTO_AMBER:
			if (IsTimerUp(1))
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fdbb 	bl	80012bc <IsTimerUp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d01d      	beq.n	8000788 <fsm_Verti_LEDs+0xa0>
			{
				Verti_Status = AUTO_RED;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <fsm_Verti_LEDs+0xac>)
 800074e:	2211      	movs	r2, #17
 8000750:	601a      	str	r2, [r3, #0]
				setTimer(1, RED);
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <fsm_Verti_LEDs+0xb8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4619      	mov	r1, r3
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fdc3 	bl	80012e4 <setTimer>
			}
			break;
 800075e:	e013      	b.n	8000788 <fsm_Verti_LEDs+0xa0>

		case AUTO_RED:
			if (IsTimerUp(1))
 8000760:	2001      	movs	r0, #1
 8000762:	f000 fdab 	bl	80012bc <IsTimerUp>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00f      	beq.n	800078c <fsm_Verti_LEDs+0xa4>
			{
				Verti_Status = AUTO_GREEN;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <fsm_Verti_LEDs+0xac>)
 800076e:	2212      	movs	r2, #18
 8000770:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN);
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <fsm_Verti_LEDs+0xb0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fdb3 	bl	80012e4 <setTimer>
			}
			break;
 800077e:	e005      	b.n	800078c <fsm_Verti_LEDs+0xa4>

		default:
			break;
 8000780:	bf00      	nop
 8000782:	e004      	b.n	800078e <fsm_Verti_LEDs+0xa6>
			break;
 8000784:	bf00      	nop
 8000786:	e002      	b.n	800078e <fsm_Verti_LEDs+0xa6>
			break;
 8000788:	bf00      	nop
 800078a:	e000      	b.n	800078e <fsm_Verti_LEDs+0xa6>
			break;
 800078c:	bf00      	nop
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000003c 	.word	0x2000003c
 8000798:	20000054 	.word	0x20000054
 800079c:	20000050 	.word	0x20000050
 80007a0:	2000004c 	.word	0x2000004c

080007a4 <LEDsDisplay>:

void LEDsDisplay()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	fsm_Hori_LEDs();
 80007a8:	f7ff ff40 	bl	800062c <fsm_Hori_LEDs>
	fsm_Verti_LEDs();
 80007ac:	f7ff ff9c 	bl	80006e8 <fsm_Verti_LEDs>

	switch (Hori_Status)
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <LEDsDisplay+0xc4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b13      	cmp	r3, #19
 80007b6:	d011      	beq.n	80007dc <LEDsDisplay+0x38>
 80007b8:	2b13      	cmp	r3, #19
 80007ba:	dc25      	bgt.n	8000808 <LEDsDisplay+0x64>
 80007bc:	2b11      	cmp	r3, #17
 80007be:	d002      	beq.n	80007c6 <LEDsDisplay+0x22>
 80007c0:	2b12      	cmp	r3, #18
 80007c2:	d016      	beq.n	80007f2 <LEDsDisplay+0x4e>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, LED_ON);
			HAL_GPIO_WritePin(GPIOA, red1_Pin | amber1_Pin, LED_OFF);
			break;
		default:
			break;
 80007c4:	e020      	b.n	8000808 <LEDsDisplay+0x64>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, LED_ON);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2104      	movs	r1, #4
 80007ca:	4828      	ldr	r0, [pc, #160]	; (800086c <LEDsDisplay+0xc8>)
 80007cc:	f001 f9bd 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber1_Pin | green1_Pin, LED_OFF);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2118      	movs	r1, #24
 80007d4:	4825      	ldr	r0, [pc, #148]	; (800086c <LEDsDisplay+0xc8>)
 80007d6:	f001 f9b8 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 80007da:	e016      	b.n	800080a <LEDsDisplay+0x66>
			HAL_GPIO_WritePin(amber1_GPIO_Port, amber1_Pin, LED_ON);
 80007dc:	2201      	movs	r2, #1
 80007de:	2108      	movs	r1, #8
 80007e0:	4822      	ldr	r0, [pc, #136]	; (800086c <LEDsDisplay+0xc8>)
 80007e2:	f001 f9b2 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | green1_Pin, LED_OFF);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2114      	movs	r1, #20
 80007ea:	4820      	ldr	r0, [pc, #128]	; (800086c <LEDsDisplay+0xc8>)
 80007ec:	f001 f9ad 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 80007f0:	e00b      	b.n	800080a <LEDsDisplay+0x66>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, LED_ON);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2110      	movs	r1, #16
 80007f6:	481d      	ldr	r0, [pc, #116]	; (800086c <LEDsDisplay+0xc8>)
 80007f8:	f001 f9a7 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | amber1_Pin, LED_OFF);
 80007fc:	2200      	movs	r2, #0
 80007fe:	210c      	movs	r1, #12
 8000800:	481a      	ldr	r0, [pc, #104]	; (800086c <LEDsDisplay+0xc8>)
 8000802:	f001 f9a2 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 8000806:	e000      	b.n	800080a <LEDsDisplay+0x66>
			break;
 8000808:	bf00      	nop
	}

	switch (Verti_Status)
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <LEDsDisplay+0xcc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b13      	cmp	r3, #19
 8000810:	d011      	beq.n	8000836 <LEDsDisplay+0x92>
 8000812:	2b13      	cmp	r3, #19
 8000814:	dc25      	bgt.n	8000862 <LEDsDisplay+0xbe>
 8000816:	2b11      	cmp	r3, #17
 8000818:	d002      	beq.n	8000820 <LEDsDisplay+0x7c>
 800081a:	2b12      	cmp	r3, #18
 800081c:	d016      	beq.n	800084c <LEDsDisplay+0xa8>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, LED_ON);
			HAL_GPIO_WritePin(GPIOA, red2_Pin | amber2_Pin, LED_OFF);
			break;
		default:
			break;
 800081e:	e020      	b.n	8000862 <LEDsDisplay+0xbe>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, LED_ON);
 8000820:	2201      	movs	r2, #1
 8000822:	2120      	movs	r1, #32
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <LEDsDisplay+0xc8>)
 8000826:	f001 f990 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber2_Pin | green2_Pin, LED_OFF);
 800082a:	2200      	movs	r2, #0
 800082c:	21c0      	movs	r1, #192	; 0xc0
 800082e:	480f      	ldr	r0, [pc, #60]	; (800086c <LEDsDisplay+0xc8>)
 8000830:	f001 f98b 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 8000834:	e016      	b.n	8000864 <LEDsDisplay+0xc0>
			HAL_GPIO_WritePin(amber2_GPIO_Port, amber2_Pin, LED_ON);
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <LEDsDisplay+0xc8>)
 800083c:	f001 f985 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red2_Pin | green2_Pin, LED_OFF);
 8000840:	2200      	movs	r2, #0
 8000842:	21a0      	movs	r1, #160	; 0xa0
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <LEDsDisplay+0xc8>)
 8000846:	f001 f980 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 800084a:	e00b      	b.n	8000864 <LEDsDisplay+0xc0>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, LED_ON);
 800084c:	2201      	movs	r2, #1
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <LEDsDisplay+0xc8>)
 8000852:	f001 f97a 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red2_Pin | amber2_Pin, LED_OFF);
 8000856:	2200      	movs	r2, #0
 8000858:	2160      	movs	r1, #96	; 0x60
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <LEDsDisplay+0xc8>)
 800085c:	f001 f975 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 8000860:	e000      	b.n	8000864 <LEDsDisplay+0xc0>
			break;
 8000862:	bf00      	nop
	}
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000038 	.word	0x20000038
 800086c:	40010800 	.word	0x40010800
 8000870:	2000003c 	.word	0x2000003c

08000874 <isButtonPressed>:
int button_flag[BUTTONS];
GPIO_PinState KeyReg[BUTTONS][4];
int TimeOutForKeyPress[BUTTONS];

int isButtonPressed(int button)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if(button_flag[button] == 1)
 800087c:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <isButtonPressed+0x30>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d106      	bne.n	8000896 <isButtonPressed+0x22>
	{
		button_flag[button] = 0;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <isButtonPressed+0x30>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2100      	movs	r1, #0
 800088e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000892:	2301      	movs	r3, #1
 8000894:	e000      	b.n	8000898 <isButtonPressed+0x24>
	}
	return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000120 	.word	0x20000120

080008a8 <getKeyInput>:

void getKeyInput(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
//	timerRun();
	for(int button = 0; button < BUTTONS; button++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	e0a4      	b.n	80009fe <getKeyInput+0x156>
	{
		KeyReg[button][0] = KeyReg[button][1];
 80008b4:	4a56      	ldr	r2, [pc, #344]	; (8000a10 <getKeyInput+0x168>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	7859      	ldrb	r1, [r3, #1]
 80008be:	4a54      	ldr	r2, [pc, #336]	; (8000a10 <getKeyInput+0x168>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		KeyReg[button][1] = KeyReg[button][2];
 80008c6:	4a52      	ldr	r2, [pc, #328]	; (8000a10 <getKeyInput+0x168>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	7899      	ldrb	r1, [r3, #2]
 80008d0:	4a4f      	ldr	r2, [pc, #316]	; (8000a10 <getKeyInput+0x168>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	460a      	mov	r2, r1
 80008da:	705a      	strb	r2, [r3, #1]
		switch(button)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d025      	beq.n	800092e <getKeyInput+0x86>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	dc30      	bgt.n	800094a <getKeyInput+0xa2>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <getKeyInput+0x4e>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d00e      	beq.n	8000912 <getKeyInput+0x6a>
				break;
			case BUTTON_3:
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
				break;
			default:
				break;
 80008f4:	e029      	b.n	800094a <getKeyInput+0xa2>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80008f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fa:	4846      	ldr	r0, [pc, #280]	; (8000a14 <getKeyInput+0x16c>)
 80008fc:	f001 f90e 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	4619      	mov	r1, r3
 8000904:	4a42      	ldr	r2, [pc, #264]	; (8000a10 <getKeyInput+0x168>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	460a      	mov	r2, r1
 800090e:	709a      	strb	r2, [r3, #2]
				break;
 8000910:	e01c      	b.n	800094c <getKeyInput+0xa4>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	483f      	ldr	r0, [pc, #252]	; (8000a14 <getKeyInput+0x16c>)
 8000918:	f001 f900 	bl	8001b1c <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	4619      	mov	r1, r3
 8000920:	4a3b      	ldr	r2, [pc, #236]	; (8000a10 <getKeyInput+0x168>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	460a      	mov	r2, r1
 800092a:	709a      	strb	r2, [r3, #2]
				break;
 800092c:	e00e      	b.n	800094c <getKeyInput+0xa4>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800092e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000932:	4838      	ldr	r0, [pc, #224]	; (8000a14 <getKeyInput+0x16c>)
 8000934:	f001 f8f2 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	4619      	mov	r1, r3
 800093c:	4a34      	ldr	r2, [pc, #208]	; (8000a10 <getKeyInput+0x168>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	460a      	mov	r2, r1
 8000946:	709a      	strb	r2, [r3, #2]
				break;
 8000948:	e000      	b.n	800094c <getKeyInput+0xa4>
				break;
 800094a:	bf00      	nop
		}
		if((KeyReg[button][1] == KeyReg[button][0]) && (KeyReg[button][2] == KeyReg[button][1]))
 800094c:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <getKeyInput+0x168>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	785a      	ldrb	r2, [r3, #1]
 8000956:	492e      	ldr	r1, [pc, #184]	; (8000a10 <getKeyInput+0x168>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800095e:	429a      	cmp	r2, r3
 8000960:	d14a      	bne.n	80009f8 <getKeyInput+0x150>
 8000962:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <getKeyInput+0x168>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	789a      	ldrb	r2, [r3, #2]
 800096c:	4928      	ldr	r1, [pc, #160]	; (8000a10 <getKeyInput+0x168>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	785b      	ldrb	r3, [r3, #1]
 8000976:	429a      	cmp	r2, r3
 8000978:	d13e      	bne.n	80009f8 <getKeyInput+0x150>
		{
			if (KeyReg[button][3] != KeyReg[button][2])
 800097a:	4a25      	ldr	r2, [pc, #148]	; (8000a10 <getKeyInput+0x168>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	78da      	ldrb	r2, [r3, #3]
 8000984:	4922      	ldr	r1, [pc, #136]	; (8000a10 <getKeyInput+0x168>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	789b      	ldrb	r3, [r3, #2]
 800098e:	429a      	cmp	r2, r3
 8000990:	d01d      	beq.n	80009ce <getKeyInput+0x126>
			{
				KeyReg[button][3] = KeyReg[button][2];
 8000992:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <getKeyInput+0x168>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	7899      	ldrb	r1, [r3, #2]
 800099c:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <getKeyInput+0x168>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	460a      	mov	r2, r1
 80009a6:	70da      	strb	r2, [r3, #3]

				if (KeyReg[button][2] == PRESSED_STATE)
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <getKeyInput+0x168>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d120      	bne.n	80009f8 <getKeyInput+0x150>
				{
					button_flag[button] = 1;
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <getKeyInput+0x170>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2101      	movs	r1, #1
 80009bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimeOutForKeyPress[button] = counterKeyPress;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <getKeyInput+0x174>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4916      	ldr	r1, [pc, #88]	; (8000a20 <getKeyInput+0x178>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80009cc:	e014      	b.n	80009f8 <getKeyInput+0x150>
				}
			}
			else
			{
				TimeOutForKeyPress[button]--;
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <getKeyInput+0x178>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d6:	1e5a      	subs	r2, r3, #1
 80009d8:	4911      	ldr	r1, [pc, #68]	; (8000a20 <getKeyInput+0x178>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[button] == 0)
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <getKeyInput+0x178>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d105      	bne.n	80009f8 <getKeyInput+0x150>
					KeyReg[button][3] = NORMAL_STATE;
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <getKeyInput+0x168>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	2201      	movs	r2, #1
 80009f6:	70da      	strb	r2, [r3, #3]
	for(int button = 0; button < BUTTONS; button++)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	f77f af57 	ble.w	80008b4 <getKeyInput+0xc>
			}
		}
	}
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000012c 	.word	0x2000012c
 8000a14:	40010800 	.word	0x40010800
 8000a18:	20000120 	.word	0x20000120
 8000a1c:	20000044 	.word	0x20000044
 8000a20:	20000114 	.word	0x20000114

08000a24 <fsm_mode>:

#include "fsm_mode.h"
GPIO_PinState Blink_Status = LED_ON;

void fsm_mode(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	switch(mode)
 8000a28:	4b86      	ldr	r3, [pc, #536]	; (8000c44 <fsm_mode+0x220>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3b08      	subs	r3, #8
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	f200 80ff 	bhi.w	8000c32 <fsm_mode+0x20e>
 8000a34:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <fsm_mode+0x18>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a51 	.word	0x08000a51
 8000a40:	08000a59 	.word	0x08000a59
 8000a44:	08000a75 	.word	0x08000a75
 8000a48:	08000b03 	.word	0x08000b03
 8000a4c:	08000b8f 	.word	0x08000b8f
	{
		case MODE_INIT:
			mode = MODE_1;
 8000a50:	4b7c      	ldr	r3, [pc, #496]	; (8000c44 <fsm_mode+0x220>)
 8000a52:	2209      	movs	r2, #9
 8000a54:	601a      	str	r2, [r3, #0]
			break;
 8000a56:	e0f3      	b.n	8000c40 <fsm_mode+0x21c>

		case MODE_1:
			if (isButtonPressed(BUTTON_1))
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff ff0b 	bl	8000874 <isButtonPressed>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d002      	beq.n	8000a6a <fsm_mode+0x46>
				mode = MODE_2;
 8000a64:	4b77      	ldr	r3, [pc, #476]	; (8000c44 <fsm_mode+0x220>)
 8000a66:	220a      	movs	r2, #10
 8000a68:	601a      	str	r2, [r3, #0]

			LEDsDisplay();
 8000a6a:	f7ff fe9b 	bl	80007a4 <LEDsDisplay>
			updateBufferForMode1();
 8000a6e:	f7ff fbc3 	bl	80001f8 <updateBufferForMode1>
			break;
 8000a72:	e0e5      	b.n	8000c40 <fsm_mode+0x21c>

		case MODE_2:
			if (isButtonPressed(BUTTON_1))
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff fefd 	bl	8000874 <isButtonPressed>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <fsm_mode+0x62>
				mode = MODE_3;
 8000a80:	4b70      	ldr	r3, [pc, #448]	; (8000c44 <fsm_mode+0x220>)
 8000a82:	220b      	movs	r2, #11
 8000a84:	601a      	str	r2, [r3, #0]

			if (IsTimerUp(3))
 8000a86:	2003      	movs	r0, #3
 8000a88:	f000 fc18 	bl	80012bc <IsTimerUp>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00f      	beq.n	8000ab2 <fsm_mode+0x8e>
			{
				Blink_Status = !Blink_Status;
 8000a92:	4b6d      	ldr	r3, [pc, #436]	; (8000c48 <fsm_mode+0x224>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b69      	ldr	r3, [pc, #420]	; (8000c48 <fsm_mode+0x224>)
 8000aa4:	701a      	strb	r2, [r3, #0]
				setTimer(3, LED_Blink);
 8000aa6:	4b69      	ldr	r3, [pc, #420]	; (8000c4c <fsm_mode+0x228>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 fc19 	bl	80012e4 <setTimer>
			}

			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin, Blink_Status);
 8000ab2:	4b65      	ldr	r3, [pc, #404]	; (8000c48 <fsm_mode+0x224>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2124      	movs	r1, #36	; 0x24
 8000aba:	4865      	ldr	r0, [pc, #404]	; (8000c50 <fsm_mode+0x22c>)
 8000abc:	f001 f845 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber1_Pin | amber2_Pin | green1_Pin | green2_Pin, LED_OFF);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	21d8      	movs	r1, #216	; 0xd8
 8000ac4:	4862      	ldr	r0, [pc, #392]	; (8000c50 <fsm_mode+0x22c>)
 8000ac6:	f001 f840 	bl	8001b4a <HAL_GPIO_WritePin>

			count_val = RED / 100;
 8000aca:	4b62      	ldr	r3, [pc, #392]	; (8000c54 <fsm_mode+0x230>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a62      	ldr	r2, [pc, #392]	; (8000c58 <fsm_mode+0x234>)
 8000ad0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad4:	1152      	asrs	r2, r2, #5
 8000ad6:	17db      	asrs	r3, r3, #31
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	4a60      	ldr	r2, [pc, #384]	; (8000c5c <fsm_mode+0x238>)
 8000adc:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 8000ade:	f7ff fbe1 	bl	80002a4 <updateBufferForIncVal>

			if (isButtonPressed(BUTTON_2))
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fec6 	bl	8000874 <isButtonPressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 80a3 	beq.w	8000c36 <fsm_mode+0x212>
			{
				mode = INC_RED;
 8000af0:	4b54      	ldr	r3, [pc, #336]	; (8000c44 <fsm_mode+0x220>)
 8000af2:	220d      	movs	r2, #13
 8000af4:	601a      	str	r2, [r3, #0]
				count_val++;
 8000af6:	4b59      	ldr	r3, [pc, #356]	; (8000c5c <fsm_mode+0x238>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <fsm_mode+0x238>)
 8000afe:	6013      	str	r3, [r2, #0]
			}
			break;
 8000b00:	e099      	b.n	8000c36 <fsm_mode+0x212>

		case MODE_3:
			if (isButtonPressed(BUTTON_1))
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff feb6 	bl	8000874 <isButtonPressed>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <fsm_mode+0xf0>
				mode = MODE_4;
 8000b0e:	4b4d      	ldr	r3, [pc, #308]	; (8000c44 <fsm_mode+0x220>)
 8000b10:	220c      	movs	r2, #12
 8000b12:	601a      	str	r2, [r3, #0]

			if (IsTimerUp(3))
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 fbd1 	bl	80012bc <IsTimerUp>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00f      	beq.n	8000b40 <fsm_mode+0x11c>
			{
				Blink_Status = !Blink_Status;
 8000b20:	4b49      	ldr	r3, [pc, #292]	; (8000c48 <fsm_mode+0x224>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <fsm_mode+0x224>)
 8000b32:	701a      	strb	r2, [r3, #0]
				setTimer(3, LED_Blink);
 8000b34:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <fsm_mode+0x228>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f000 fbd2 	bl	80012e4 <setTimer>
			}

			HAL_GPIO_WritePin(GPIOA, amber1_Pin | amber2_Pin, Blink_Status);
 8000b40:	4b41      	ldr	r3, [pc, #260]	; (8000c48 <fsm_mode+0x224>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	2148      	movs	r1, #72	; 0x48
 8000b48:	4841      	ldr	r0, [pc, #260]	; (8000c50 <fsm_mode+0x22c>)
 8000b4a:	f000 fffe 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin | green1_Pin | green2_Pin, LED_OFF);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	21b4      	movs	r1, #180	; 0xb4
 8000b52:	483f      	ldr	r0, [pc, #252]	; (8000c50 <fsm_mode+0x22c>)
 8000b54:	f000 fff9 	bl	8001b4a <HAL_GPIO_WritePin>

			count_val = AMBER / 100;
 8000b58:	4b41      	ldr	r3, [pc, #260]	; (8000c60 <fsm_mode+0x23c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a3e      	ldr	r2, [pc, #248]	; (8000c58 <fsm_mode+0x234>)
 8000b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b62:	1152      	asrs	r2, r2, #5
 8000b64:	17db      	asrs	r3, r3, #31
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	4a3c      	ldr	r2, [pc, #240]	; (8000c5c <fsm_mode+0x238>)
 8000b6a:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 8000b6c:	f7ff fb9a 	bl	80002a4 <updateBufferForIncVal>

			if (isButtonPressed(BUTTON_2))
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff fe7f 	bl	8000874 <isButtonPressed>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d05e      	beq.n	8000c3a <fsm_mode+0x216>
			{
				mode = INC_AMBER;
 8000b7c:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <fsm_mode+0x220>)
 8000b7e:	220e      	movs	r2, #14
 8000b80:	601a      	str	r2, [r3, #0]
				count_val++;
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <fsm_mode+0x238>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4a34      	ldr	r2, [pc, #208]	; (8000c5c <fsm_mode+0x238>)
 8000b8a:	6013      	str	r3, [r2, #0]
			}
			break;
 8000b8c:	e055      	b.n	8000c3a <fsm_mode+0x216>

		case MODE_4:
			if (isButtonPressed(BUTTON_1))
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fe70 	bl	8000874 <isButtonPressed>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00e      	beq.n	8000bb8 <fsm_mode+0x194>
			{
				mode = MODE_1;
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <fsm_mode+0x220>)
 8000b9c:	2209      	movs	r2, #9
 8000b9e:	601a      	str	r2, [r3, #0]
				setTimer(0, RED);
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <fsm_mode+0x230>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 fb9c 	bl	80012e4 <setTimer>
				setTimer(1, GREEN);
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <fsm_mode+0x240>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f000 fb96 	bl	80012e4 <setTimer>
			}

			if (IsTimerUp(3))
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 fb7f 	bl	80012bc <IsTimerUp>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00f      	beq.n	8000be4 <fsm_mode+0x1c0>
			{
				Blink_Status = !Blink_Status;
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <fsm_mode+0x224>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf0c      	ite	eq
 8000bcc:	2301      	moveq	r3, #1
 8000bce:	2300      	movne	r3, #0
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <fsm_mode+0x224>)
 8000bd6:	701a      	strb	r2, [r3, #0]
				setTimer(3, LED_Blink);
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <fsm_mode+0x228>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 fb80 	bl	80012e4 <setTimer>
			}

			HAL_GPIO_WritePin(GPIOA, green1_Pin | green2_Pin, Blink_Status);
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <fsm_mode+0x224>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	2190      	movs	r1, #144	; 0x90
 8000bec:	4818      	ldr	r0, [pc, #96]	; (8000c50 <fsm_mode+0x22c>)
 8000bee:	f000 ffac 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin | amber1_Pin | amber2_Pin, LED_OFF);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	216c      	movs	r1, #108	; 0x6c
 8000bf6:	4816      	ldr	r0, [pc, #88]	; (8000c50 <fsm_mode+0x22c>)
 8000bf8:	f000 ffa7 	bl	8001b4a <HAL_GPIO_WritePin>

			count_val = GREEN / 100;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <fsm_mode+0x240>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <fsm_mode+0x234>)
 8000c02:	fb82 1203 	smull	r1, r2, r2, r3
 8000c06:	1152      	asrs	r2, r2, #5
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <fsm_mode+0x238>)
 8000c0e:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 8000c10:	f7ff fb48 	bl	80002a4 <updateBufferForIncVal>

			if (isButtonPressed(BUTTON_2))
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff fe2d 	bl	8000874 <isButtonPressed>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00e      	beq.n	8000c3e <fsm_mode+0x21a>
			{
				mode = INC_GREEN;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <fsm_mode+0x220>)
 8000c22:	220f      	movs	r2, #15
 8000c24:	601a      	str	r2, [r3, #0]
				count_val++;
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <fsm_mode+0x238>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <fsm_mode+0x238>)
 8000c2e:	6013      	str	r3, [r2, #0]
			}
			break;
 8000c30:	e005      	b.n	8000c3e <fsm_mode+0x21a>

		default:
			break;
 8000c32:	bf00      	nop
 8000c34:	e004      	b.n	8000c40 <fsm_mode+0x21c>
			break;
 8000c36:	bf00      	nop
 8000c38:	e002      	b.n	8000c40 <fsm_mode+0x21c>
			break;
 8000c3a:	bf00      	nop
 8000c3c:	e000      	b.n	8000c40 <fsm_mode+0x21c>
			break;
 8000c3e:	bf00      	nop
	}
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000048 	.word	0x20000048
 8000c48:	20000040 	.word	0x20000040
 8000c4c:	20000068 	.word	0x20000068
 8000c50:	40010800 	.word	0x40010800
 8000c54:	2000004c 	.word	0x2000004c
 8000c58:	51eb851f 	.word	0x51eb851f
 8000c5c:	200000fc 	.word	0x200000fc
 8000c60:	20000050 	.word	0x20000050
 8000c64:	20000054 	.word	0x20000054

08000c68 <seg_leds>:

void seg_leds(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	  if(IsTimerUp(2))
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f000 fb25 	bl	80012bc <IsTimerUp>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d058      	beq.n	8000d2a <seg_leds+0xc2>
	  {
		  HAL_GPIO_WritePin(GPIOA, 0xF00, SEG_OFF);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000c7e:	482c      	ldr	r0, [pc, #176]	; (8000d30 <seg_leds+0xc8>)
 8000c80:	f000 ff63 	bl	8001b4a <HAL_GPIO_WritePin>
		  switch (seg_index)
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <seg_leds+0xcc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d83f      	bhi.n	8000d0c <seg_leds+0xa4>
 8000c8c:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <seg_leds+0x2c>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000ca5 	.word	0x08000ca5
 8000c98:	08000cbf 	.word	0x08000cbf
 8000c9c:	08000cd9 	.word	0x08000cd9
 8000ca0:	08000cf3 	.word	0x08000cf3
		  {
		  	  case 0: // 1st 7SEG_LEDs
		  		  HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SEG_ON);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000caa:	4821      	ldr	r0, [pc, #132]	; (8000d30 <seg_leds+0xc8>)
 8000cac:	f000 ff4d 	bl	8001b4a <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en1_Pin | en2_Pin | en3_Pin, SEG_OFF);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <seg_leds+0xc8>)
 8000cb8:	f000 ff47 	bl	8001b4a <HAL_GPIO_WritePin>
		  		  break;
 8000cbc:	e027      	b.n	8000d0e <seg_leds+0xa6>
		  	  case 1: // 2nd 7SEG_LEDs
		  		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SEG_ON);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	481a      	ldr	r0, [pc, #104]	; (8000d30 <seg_leds+0xc8>)
 8000cc6:	f000 ff40 	bl	8001b4a <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en2_Pin | en3_Pin, SEG_OFF);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8000cd0:	4817      	ldr	r0, [pc, #92]	; (8000d30 <seg_leds+0xc8>)
 8000cd2:	f000 ff3a 	bl	8001b4a <HAL_GPIO_WritePin>
		  		  break;
 8000cd6:	e01a      	b.n	8000d0e <seg_leds+0xa6>
		  	  case 2: // 3rd 7SEG_LEDs
		  		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SEG_ON);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	4814      	ldr	r0, [pc, #80]	; (8000d30 <seg_leds+0xc8>)
 8000ce0:	f000 ff33 	bl	8001b4a <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en1_Pin | en3_Pin, SEG_OFF);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <seg_leds+0xc8>)
 8000cec:	f000 ff2d 	bl	8001b4a <HAL_GPIO_WritePin>
		  		  break;
 8000cf0:	e00d      	b.n	8000d0e <seg_leds+0xa6>
		  	  case 3: // 4th 7SEG_LEDs
		  		  HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SEG_ON);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <seg_leds+0xc8>)
 8000cfa:	f000 ff26 	bl	8001b4a <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en1_Pin | en2_Pin, SEG_OFF);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <seg_leds+0xc8>)
 8000d06:	f000 ff20 	bl	8001b4a <HAL_GPIO_WritePin>
		  		  break;
 8000d0a:	e000      	b.n	8000d0e <seg_leds+0xa6>
		  	  default:
		  		  break;
 8000d0c:	bf00      	nop
		  }
		  // Display 7SEG_LEDs
		  update7SEG(seg_index++);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <seg_leds+0xcc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <seg_leds+0xcc>)
 8000d16:	600a      	str	r2, [r1, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fa2b 	bl	8000174 <update7SEG>

		  // Set switching time
		  setTimer(2, SEG_Switch);
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <seg_leds+0xd0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 fadd 	bl	80012e4 <setTimer>
	  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40010800 	.word	0x40010800
 8000d34:	200000f8 	.word	0x200000f8
 8000d38:	20000064 	.word	0x20000064

08000d3c <set_init>:

void set_init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	  setTimer(0, RED);
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <set_init+0x44>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 facc 	bl	80012e4 <setTimer>
	  setTimer(1, GREEN);
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <set_init+0x48>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	f000 fac6 	bl	80012e4 <setTimer>
	  setTimer(2, SEG_Switch);
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <set_init+0x4c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f000 fac0 	bl	80012e4 <setTimer>
	  setTimer(3, LED_Blink);
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <set_init+0x50>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 faba 	bl	80012e4 <setTimer>

	  // Turn off all 7SEG_LEDs
	  HAL_GPIO_WritePin(GPIOA, 0xF00, SEG_OFF);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <set_init+0x54>)
 8000d78:	f000 fee7 	bl	8001b4a <HAL_GPIO_WritePin>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000004c 	.word	0x2000004c
 8000d84:	20000054 	.word	0x20000054
 8000d88:	20000064 	.word	0x20000064
 8000d8c:	20000068 	.word	0x20000068
 8000d90:	40010800 	.word	0x40010800

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f000 fbd6 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f810 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 f896 	bl	8000ed0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000da4:	f000 f848 	bl	8000e38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <main+0x28>)
 8000daa:	f001 fb13 	bl	80023d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Init();
 8000dae:	f000 f9bd 	bl	800112c <SCH_Init>
  SCH_Testing();
 8000db2:	f000 fa53 	bl	800125c <SCH_Testing>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Task();
 8000db6:	f000 f9f3 	bl	80011a0 <SCH_Dispatch_Task>
 8000dba:	e7fc      	b.n	8000db6 <main+0x22>
 8000dbc:	20000138 	.word	0x20000138

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b090      	sub	sp, #64	; 0x40
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	2228      	movs	r2, #40	; 0x28
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fed2 	bl	8002b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dea:	2310      	movs	r3, #16
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fec0 	bl	8001b7c <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e02:	f000 f8d5 	bl	8000fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 f92c 	bl	800207c <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f8c1 	bl	8000fb0 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	; 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000e5e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000e6c:	2209      	movs	r2, #9
 8000e6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000e7e:	f001 fa59 	bl	8002334 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e88:	f000 f892 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000e9a:	f001 fbef 	bl	800267c <HAL_TIM_ConfigClockSource>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ea4:	f000 f884 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_TIM2_Init+0x94>)
 8000eb6:	f001 fdbb 	bl	8002a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ec0:	f000 f876 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000138 	.word	0x20000138

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|amber1_Pin|green1_Pin|red2_Pin
 8000f14:	2200      	movs	r2, #0
 8000f16:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000f1a:	481c      	ldr	r0, [pc, #112]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f1c:	f000 fe15 	bl	8001b4a <HAL_GPIO_WritePin>
                          |amber2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, g_Pin|f_Pin|e_Pin|d_Pin
 8000f20:	2200      	movs	r2, #0
 8000f22:	217f      	movs	r1, #127	; 0x7f
 8000f24:	481a      	ldr	r0, [pc, #104]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f26:	f000 fe10 	bl	8001b4a <HAL_GPIO_WritePin>
                          |c_Pin|b_Pin|a_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin amber1_Pin green1_Pin red2_Pin
                           amber2_Pin green2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = red1_Pin|amber1_Pin|green1_Pin|red2_Pin
 8000f2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f2e:	60bb      	str	r3, [r7, #8]
                          |amber2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f44:	f000 fc70 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : g_Pin f_Pin e_Pin d_Pin
                           c_Pin b_Pin a_Pin */
  GPIO_InitStruct.Pin = g_Pin|f_Pin|e_Pin|d_Pin
 8000f48:	237f      	movs	r3, #127	; 0x7f
 8000f4a:	60bb      	str	r3, [r7, #8]
                          |c_Pin|b_Pin|a_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2302      	movs	r3, #2
 8000f56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f60:	f000 fc62 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000f64:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f7a:	f000 fc55 	bl	8001828 <HAL_GPIO_Init>

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40010c00 	.word	0x40010c00

08000f94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f9c:	f000 f9ba 	bl	8001314 <timerRun>
	SCH_Update();
 8000fa0:	f000 f940 	bl	8001224 <SCH_Update>
	getKeyInput();
 8000fa4:	f7ff fc80 	bl	80008a8 <getKeyInput>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x8>

08000fba <CreateNode>:

#include "scheduler.h"

// Linked List
struct Node *CreateNode(sTask data)
{
 8000fba:	b084      	sub	sp, #16
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	f107 0c10 	add.w	ip, r7, #16
 8000fc6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    struct Node *NewNode = malloc(sizeof(*NewNode));
 8000fca:	2018      	movs	r0, #24
 8000fcc:	f001 fdc4 	bl	8002b58 <malloc>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	607b      	str	r3, [r7, #4]
    if (!NewNode)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <CreateNode+0x24>
        return NULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e012      	b.n	8001004 <CreateNode+0x4a>

    NewNode->data.pTask = data.pTask;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	601a      	str	r2, [r3, #0]
    NewNode->data.Delay = data.Delay;
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
    NewNode->data.Period = data.Period;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	609a      	str	r2, [r3, #8]
    NewNode->data.RunMe = data.RunMe;
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60da      	str	r2, [r3, #12]
    NewNode->data.TaskID = data.TaskID;
 8000ff6:	6a3a      	ldr	r2, [r7, #32]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	611a      	str	r2, [r3, #16]
    NewNode->next = NULL;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
    return NewNode;
 8001002:	687b      	ldr	r3, [r7, #4]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100e:	b004      	add	sp, #16
 8001010:	4770      	bx	lr

08001012 <AddTask>:

void AddTask(struct Node **head, sTask data)
{
 8001012:	b084      	sub	sp, #16
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	f107 001c 	add.w	r0, r7, #28
 8001020:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct Node *NewNode = CreateNode(data);
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102e:	f7ff ffc4 	bl	8000fba <CreateNode>
 8001032:	60b8      	str	r0, [r7, #8]
    if (*head == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d103      	bne.n	8001044 <AddTask+0x32>
    {
        *head = NewNode;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	601a      	str	r2, [r3, #0]
//        (*((*head)->data.pTask))();
        return;
 8001042:	e044      	b.n	80010ce <AddTask+0xbc>
    }

    struct Node *current = *head;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
    if (NewNode->data.Delay < (*head)->data.Delay)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d20d      	bcs.n	8001074 <AddTask+0x62>
    {
        current->data.Delay -= NewNode->data.Delay;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	605a      	str	r2, [r3, #4]
        NewNode->next = current;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	615a      	str	r2, [r3, #20]
        *head = NewNode;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	601a      	str	r2, [r3, #0]
//        (*((*head)->data.pTask))();
        return;
 8001072:	e02c      	b.n	80010ce <AddTask+0xbc>
    }
    else
        NewNode->data.Delay -= current->data.Delay;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	605a      	str	r2, [r3, #4]

    while (current->next != NULL && current->next->data.Delay <= NewNode->data.Delay)
 8001082:	e00a      	b.n	800109a <AddTask+0x88>
    {
        NewNode->data.Delay -= current->next->data.Delay;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	605a      	str	r2, [r3, #4]
        current = current->next;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	60fb      	str	r3, [r7, #12]
    while (current->next != NULL && current->next->data.Delay <= NewNode->data.Delay)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <AddTask+0x9e>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d9e9      	bls.n	8001084 <AddTask+0x72>
    }
    if (current->next == NULL)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <AddTask+0xae>
        current->next = NewNode;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	e006      	b.n	80010ce <AddTask+0xbc>
    else
    {
        NewNode->next = current->next;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	615a      	str	r2, [r3, #20]
        current->next = NewNode;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	615a      	str	r2, [r3, #20]
    }
//    (*((NewNode)->data.pTask))();
}
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr

080010da <DeleteTask>:

void DeleteTask(struct Node **head)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
    if (*head == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00a      	beq.n	8001100 <DeleteTask+0x26>
        return;
    struct Node *current = *head;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	60fb      	str	r3, [r7, #12]
    *head = current->next;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	695a      	ldr	r2, [r3, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
    free(current);
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f001 fd35 	bl	8002b68 <free>
 80010fe:	e000      	b.n	8001102 <DeleteTask+0x28>
        return;
 8001100:	bf00      	nop
}
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <ClearList>:

void ClearList(struct Node **head)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    while (*head != NULL)
 8001110:	e002      	b.n	8001118 <ClearList+0x10>
        DeleteTask(head);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffe1 	bl	80010da <DeleteTask>
    while (*head != NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f8      	bne.n	8001112 <ClearList+0xa>
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <SCH_Init>:
// Scheduler
static int id = 0;
static struct Node *head = NULL;

void SCH_Init()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    ClearList(&head);
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <SCH_Init+0x14>)
 8001132:	f7ff ffe9 	bl	8001108 <ClearList>
    id = 0;
 8001136:	4b03      	ldr	r3, [pc, #12]	; (8001144 <SCH_Init+0x18>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000104 	.word	0x20000104
 8001144:	20000100 	.word	0x20000100

08001148 <SCH_Add_Task>:

void SCH_Add_Task(void (*pTask)(), uint32_t Delay, uint32_t Period)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af02      	add	r7, sp, #8
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
    sTask data;
    data.pTask = pTask;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	617b      	str	r3, [r7, #20]
    data.Delay = Delay;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	61bb      	str	r3, [r7, #24]
    data.Period = Period;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	61fb      	str	r3, [r7, #28]
    data.RunMe = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
    data.TaskID = id;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <SCH_Add_Task+0x50>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    AddTask(&head, data);
 800116a:	466a      	mov	r2, sp
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001174:	e882 0003 	stmia.w	r2, {r0, r1}
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <SCH_Add_Task+0x54>)
 8001180:	f7ff ff47 	bl	8001012 <AddTask>
    id++;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SCH_Add_Task+0x50>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a03      	ldr	r2, [pc, #12]	; (8001198 <SCH_Add_Task+0x50>)
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000100 	.word	0x20000100
 800119c:	20000104 	.word	0x20000104

080011a0 <SCH_Dispatch_Task>:
{
    DeleteTaskID(&head, taskID);
}

void SCH_Dispatch_Task(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af02      	add	r7, sp, #8
    if (head == NULL)
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d032      	beq.n	8001214 <SCH_Dispatch_Task+0x74>
        return;
    if (head->data.RunMe == 1)
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d12e      	bne.n	8001216 <SCH_Dispatch_Task+0x76>
    {
        (*(head->data.pTask))();
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4798      	blx	r3
        if(head->data.Period == 0)
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d103      	bne.n	80011d2 <SCH_Dispatch_Task+0x32>
            DeleteTask(&head);
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011cc:	f7ff ff85 	bl	80010da <DeleteTask>
 80011d0:	e021      	b.n	8001216 <SCH_Dispatch_Task+0x76>
        else
        {
            sTask RenewTask;
            RenewTask.pTask = head->data.pTask;
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	607b      	str	r3, [r7, #4]
            RenewTask.Delay = head->data.Period;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	60bb      	str	r3, [r7, #8]
            RenewTask.Period = head->data.Period;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	60fb      	str	r3, [r7, #12]
            RenewTask.RunMe = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
            RenewTask.TaskID = id;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <SCH_Dispatch_Task+0x80>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	617b      	str	r3, [r7, #20]
            DeleteTask(&head);
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <SCH_Dispatch_Task+0x7c>)
 80011f6:	f7ff ff70 	bl	80010da <DeleteTask>
            AddTask(&head, RenewTask);
 80011fa:	466a      	mov	r2, sp
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001204:	e882 0003 	stmia.w	r2, {r0, r1}
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <SCH_Dispatch_Task+0x7c>)
 800120e:	f7ff ff00 	bl	8001012 <AddTask>
 8001212:	e000      	b.n	8001216 <SCH_Dispatch_Task+0x76>
        return;
 8001214:	bf00      	nop
//    while (list != NULL)
//    {
//        printf("Delay: %d\n", list->data.Delay);
//        list = list->next;
//    }
}
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000104 	.word	0x20000104
 8001220:	20000100 	.word	0x20000100

08001224 <SCH_Update>:

void SCH_Update(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    if (head == NULL)
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <SCH_Update+0x34>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00f      	beq.n	8001250 <SCH_Update+0x2c>
        return;
    if (head->data.Delay > 0)
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <SCH_Update+0x34>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <SCH_Update+0x22>
        head->data.Delay--;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <SCH_Update+0x34>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	3a01      	subs	r2, #1
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	e005      	b.n	8001252 <SCH_Update+0x2e>
    else
        head->data.RunMe = 1;
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SCH_Update+0x34>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	e000      	b.n	8001252 <SCH_Update+0x2e>
        return;
 8001250:	bf00      	nop
}
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000104 	.word	0x20000104

0800125c <SCH_Testing>:

void SCH_Testing()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	SCH_Add_Task(set_init, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <SCH_Testing+0x30>)
 8001266:	f7ff ff6f 	bl	8001148 <SCH_Add_Task>
	SCH_Add_Task(fsm_mode, 0, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	2100      	movs	r1, #0
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <SCH_Testing+0x34>)
 8001270:	f7ff ff6a 	bl	8001148 <SCH_Add_Task>
	SCH_Add_Task(fsmIncVal, 0, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2100      	movs	r1, #0
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <SCH_Testing+0x38>)
 800127a:	f7ff ff65 	bl	8001148 <SCH_Add_Task>
	SCH_Add_Task(seg_leds, 0, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <SCH_Testing+0x3c>)
 8001284:	f7ff ff60 	bl	8001148 <SCH_Add_Task>
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08000d3d 	.word	0x08000d3d
 8001290:	08000a25 	.word	0x08000a25
 8001294:	08000329 	.word	0x08000329
 8001298:	08000c69 	.word	0x08000c69

0800129c <Current_Timer_Counter>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int Current_Timer_Counter(int timer)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	return timer_counter[timer];
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <Current_Timer_Counter+0x1c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000180 	.word	0x20000180

080012bc <IsTimerUp>:

int IsTimerUp(int timer)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <IsTimerUp+0x24>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000190 	.word	0x20000190

080012e4 <setTimer>:

void setTimer(int timer, int duration)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 80012ee:	4907      	ldr	r1, [pc, #28]	; (800130c <setTimer+0x28>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <setTimer+0x2c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2100      	movs	r1, #0
 80012fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	20000180 	.word	0x20000180
 8001310:	20000190 	.word	0x20000190

08001314 <timerRun>:
void timerRun(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	e01c      	b.n	800135a <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <timerRun+0x58>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	2b00      	cmp	r3, #0
 800132a:	dd13      	ble.n	8001354 <timerRun+0x40>
		{
			timer_counter[timer]--;
 800132c:	4a0f      	ldr	r2, [pc, #60]	; (800136c <timerRun+0x58>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	490d      	ldr	r1, [pc, #52]	; (800136c <timerRun+0x58>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <timerRun+0x58>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d104      	bne.n	8001354 <timerRun+0x40>
				timer_flag[timer] = 1;
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <timerRun+0x5c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2101      	movs	r1, #1
 8001350:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3301      	adds	r3, #1
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b03      	cmp	r3, #3
 800135e:	dddf      	ble.n	8001320 <timerRun+0xc>
		}
	}
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000180 	.word	0x20000180
 8001370:	20000190 	.word	0x20000190

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <HAL_MspInit+0x5c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_MspInit+0x5c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_MspInit+0x5c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_MspInit+0x5c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_MspInit+0x60>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_MspInit+0x60>)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000

080013d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d113      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_TIM_Base_MspInit+0x44>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <HAL_TIM_Base_MspInit+0x44>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_TIM_Base_MspInit+0x44>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	201c      	movs	r0, #28
 8001408:	f000 f9d7 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800140c:	201c      	movs	r0, #28
 800140e:	f000 f9f0 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 f8b5 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <TIM2_IRQHandler+0x10>)
 8001476:	f000 fff9 	bl	800246c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000138 	.word	0x20000138

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f001 fb26 	bl	8002b04 <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20002800 	.word	0x20002800
 80014e4:	00000400 	.word	0x00000400
 80014e8:	20000108 	.word	0x20000108
 80014ec:	200001b8 	.word	0x200001b8

080014f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014fc:	f7ff fff8 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001502:	490c      	ldr	r1, [pc, #48]	; (8001534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001518:	4c09      	ldr	r4, [pc, #36]	; (8001540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001526:	f001 faf3 	bl	8002b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152a:	f7ff fc33 	bl	8000d94 <main>
  bx lr
 800152e:	4770      	bx	lr
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001538:	08002d54 	.word	0x08002d54
  ldr r2, =_sbss
 800153c:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001540:	200001b4 	.word	0x200001b4

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x28>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x28>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f923 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff ff06 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40022000 	.word	0x40022000

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f93b 	bl	800180e <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f903 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000006c 	.word	0x2000006c
 80015cc:	20000074 	.word	0x20000074
 80015d0:	20000070 	.word	0x20000070

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x1c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x20>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <HAL_IncTick+0x20>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000074 	.word	0x20000074
 80015f4:	200001a0 	.word	0x200001a0

080015f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_GetTick+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	200001a0 	.word	0x200001a0

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4906      	ldr	r1, [pc, #24]	; (80016a4 <__NVIC_EnableIRQ+0x34>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff90 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff2d 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff42 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff90 	bl	80016fc <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5f 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff35 	bl	8001670 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b08b      	sub	sp, #44	; 0x2c
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183a:	e148      	b.n	8001ace <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800183c:	2201      	movs	r2, #1
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8137 	bne.w	8001ac8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4aa3      	ldr	r2, [pc, #652]	; (8001aec <HAL_GPIO_Init+0x2c4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d05e      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001864:	4aa1      	ldr	r2, [pc, #644]	; (8001aec <HAL_GPIO_Init+0x2c4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d875      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800186a:	4aa1      	ldr	r2, [pc, #644]	; (8001af0 <HAL_GPIO_Init+0x2c8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d058      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001870:	4a9f      	ldr	r2, [pc, #636]	; (8001af0 <HAL_GPIO_Init+0x2c8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d86f      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001876:	4a9f      	ldr	r2, [pc, #636]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d052      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 800187c:	4a9d      	ldr	r2, [pc, #628]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d869      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001882:	4a9d      	ldr	r2, [pc, #628]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04c      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001888:	4a9b      	ldr	r2, [pc, #620]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d863      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800188e:	4a9b      	ldr	r2, [pc, #620]	; (8001afc <HAL_GPIO_Init+0x2d4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d046      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001894:	4a99      	ldr	r2, [pc, #612]	; (8001afc <HAL_GPIO_Init+0x2d4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d85d      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800189a:	2b12      	cmp	r3, #18
 800189c:	d82a      	bhi.n	80018f4 <HAL_GPIO_Init+0xcc>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d859      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <HAL_GPIO_Init+0x80>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	08001923 	.word	0x08001923
 80018ac:	080018fd 	.word	0x080018fd
 80018b0:	0800190f 	.word	0x0800190f
 80018b4:	08001951 	.word	0x08001951
 80018b8:	08001957 	.word	0x08001957
 80018bc:	08001957 	.word	0x08001957
 80018c0:	08001957 	.word	0x08001957
 80018c4:	08001957 	.word	0x08001957
 80018c8:	08001957 	.word	0x08001957
 80018cc:	08001957 	.word	0x08001957
 80018d0:	08001957 	.word	0x08001957
 80018d4:	08001957 	.word	0x08001957
 80018d8:	08001957 	.word	0x08001957
 80018dc:	08001957 	.word	0x08001957
 80018e0:	08001957 	.word	0x08001957
 80018e4:	08001957 	.word	0x08001957
 80018e8:	08001957 	.word	0x08001957
 80018ec:	08001905 	.word	0x08001905
 80018f0:	08001919 	.word	0x08001919
 80018f4:	4a82      	ldr	r2, [pc, #520]	; (8001b00 <HAL_GPIO_Init+0x2d8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fa:	e02c      	b.n	8001956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e029      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	3304      	adds	r3, #4
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e024      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	3308      	adds	r3, #8
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e01f      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	330c      	adds	r3, #12
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e01a      	b.n	8001958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800192a:	2304      	movs	r3, #4
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e013      	b.n	8001958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	611a      	str	r2, [r3, #16]
          break;
 8001942:	e009      	b.n	8001958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	615a      	str	r2, [r3, #20]
          break;
 800194e:	e003      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x130>
          break;
 8001956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2bff      	cmp	r3, #255	; 0xff
 800195c:	d801      	bhi.n	8001962 <HAL_GPIO_Init+0x13a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_Init+0x13e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3304      	adds	r3, #4
 8001966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d802      	bhi.n	8001974 <HAL_GPIO_Init+0x14c>
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x152>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3b08      	subs	r3, #8
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	210f      	movs	r1, #15
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	6a39      	ldr	r1, [r7, #32]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8090 	beq.w	8001ac8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a8:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <HAL_GPIO_Init+0x2dc>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_GPIO_Init+0x2dc>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_GPIO_Init+0x2dc>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c0:	4a51      	ldr	r2, [pc, #324]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_GPIO_Init+0x2e4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1e0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2e8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1dc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a47      	ldr	r2, [pc, #284]	; (8001b14 <HAL_GPIO_Init+0x2ec>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1d8>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e004      	b.n	8001a0a <HAL_GPIO_Init+0x1e2>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x1e2>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_GPIO_Init+0x1e2>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	f002 0203 	and.w	r2, r2, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a1a:	493b      	ldr	r1, [pc, #236]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a34:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4937      	ldr	r1, [pc, #220]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4933      	ldr	r1, [pc, #204]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	492d      	ldr	r1, [pc, #180]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4929      	ldr	r1, [pc, #164]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	491f      	ldr	r1, [pc, #124]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4919      	ldr	r1, [pc, #100]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4915      	ldr	r1, [pc, #84]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	3301      	adds	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f47f aeaf 	bne.w	800183c <HAL_GPIO_Init+0x14>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	372c      	adds	r7, #44	; 0x2c
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	10320000 	.word	0x10320000
 8001af0:	10310000 	.word	0x10310000
 8001af4:	10220000 	.word	0x10220000
 8001af8:	10210000 	.word	0x10210000
 8001afc:	10120000 	.word	0x10120000
 8001b00:	10110000 	.word	0x10110000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40011000 	.word	0x40011000
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e001      	b.n	8001b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	807b      	strh	r3, [r7, #2]
 8001b56:	4613      	mov	r3, r2
 8001b58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b5a:	787b      	ldrb	r3, [r7, #1]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b60:	887a      	ldrh	r2, [r7, #2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	041a      	lsls	r2, r3, #16
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	611a      	str	r2, [r3, #16]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e26c      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8087 	beq.w	8001caa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b9c:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba8:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d112      	bne.n	8001bda <HAL_RCC_OscConfig+0x5e>
 8001bb4:	4b8c      	ldr	r3, [pc, #560]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	d10b      	bne.n	8001bda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d06c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x12c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d168      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e246      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x76>
 8001be4:	4b80      	ldr	r3, [pc, #512]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a7f      	ldr	r2, [pc, #508]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e02e      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x98>
 8001bfa:	4b7b      	ldr	r3, [pc, #492]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a7a      	ldr	r2, [pc, #488]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0xbc>
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6e      	ldr	r2, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001c38:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a6a      	ldr	r2, [pc, #424]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a67      	ldr	r2, [pc, #412]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fcce 	bl	80015f8 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fcca 	bl	80015f8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1fa      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe4>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fcba 	bl	80015f8 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fcb6 	bl	80015f8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1e6      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x10c>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb6:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x18c>
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x176>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e1ba      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4939      	ldr	r1, [pc, #228]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e03a      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fc6f 	bl	80015f8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fc6b 	bl	80015f8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e19b      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4927      	ldr	r1, [pc, #156]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fc4e 	bl	80015f8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fc4a 	bl	80015f8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e17a      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d03a      	beq.n	8001e00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d019      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff fc2e 	bl	80015f8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff fc2a 	bl	80015f8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e15a      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 fa9a 	bl	80022f8 <RCC_Delay>
 8001dc4:	e01c      	b.n	8001e00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff fc14 	bl	80015f8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd2:	e00f      	b.n	8001df4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff fc10 	bl	80015f8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d908      	bls.n	8001df4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e140      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	42420000 	.word	0x42420000
 8001df0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	4b9e      	ldr	r3, [pc, #632]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e9      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a6 	beq.w	8001f5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b97      	ldr	r3, [pc, #604]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b94      	ldr	r3, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a93      	ldr	r2, [pc, #588]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	61d3      	str	r3, [r2, #28]
 8001e2a:	4b91      	ldr	r3, [pc, #580]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	4b8e      	ldr	r3, [pc, #568]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d118      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e46:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a8a      	ldr	r2, [pc, #552]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e52:	f7ff fbd1 	bl	80015f8 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7ff fbcd 	bl	80015f8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	; 0x64
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0fd      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x312>
 8001e80:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a7a      	ldr	r2, [pc, #488]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	e02d      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x334>
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b73      	ldr	r3, [pc, #460]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a72      	ldr	r2, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
 8001eae:	e01c      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x356>
 8001eb8:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6c      	ldr	r2, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e00b      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a66      	ldr	r2, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	4b64      	ldr	r3, [pc, #400]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a63      	ldr	r2, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d015      	beq.n	8001f1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fb81 	bl	80015f8 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7ff fb7d 	bl	80015f8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0ab      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ee      	beq.n	8001efa <HAL_RCC_OscConfig+0x37e>
 8001f1c:	e014      	b.n	8001f48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fb6b 	bl	80015f8 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff fb67 	bl	80015f8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e095      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ee      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a47      	ldr	r2, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8081 	beq.w	8002066 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f64:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d061      	beq.n	8002034 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d146      	bne.n	8002006 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fb3b 	bl	80015f8 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff fb37 	bl	80015f8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e067      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d108      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	492d      	ldr	r1, [pc, #180]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a19      	ldr	r1, [r3, #32]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	4927      	ldr	r1, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff fb0b 	bl	80015f8 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff fb07 	bl	80015f8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e037      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x46a>
 8002004:	e02f      	b.n	8002066 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff faf4 	bl	80015f8 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7ff faf0 	bl	80015f8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e020      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x498>
 8002032:	e018      	b.n	8002066 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e013      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	429a      	cmp	r2, r3
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
 8002078:	42420060 	.word	0x42420060

0800207c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d0      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4965      	ldr	r1, [pc, #404]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b8      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	494d      	ldr	r1, [pc, #308]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d040      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07f      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e073      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06b      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4936      	ldr	r1, [pc, #216]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7ff fa44 	bl	80015f8 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7ff fa40 	bl	80015f8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e053      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d210      	bcs.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4922      	ldr	r1, [pc, #136]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e032      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4916      	ldr	r1, [pc, #88]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800220a:	f000 f821 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800220e:	4602      	mov	r2, r0
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	490a      	ldr	r1, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	5ccb      	ldrb	r3, [r1, r3]
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1cc>)
 8002224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1d0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f9a2 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
 8002244:	08002d28 	.word	0x08002d28
 8002248:	2000006c 	.word	0x2000006c
 800224c:	20000070 	.word	0x20000070

08002250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b04      	cmp	r3, #4
 8002278:	d002      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x30>
 800227a:	2b08      	cmp	r3, #8
 800227c:	d003      	beq.n	8002286 <HAL_RCC_GetSysClockFreq+0x36>
 800227e:	e027      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002282:	613b      	str	r3, [r7, #16]
      break;
 8002284:	e027      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	0c9b      	lsrs	r3, r3, #18
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0c5b      	lsrs	r3, r3, #17
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022b2:	fb02 f203 	mul.w	r2, r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	e004      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	613b      	str	r3, [r7, #16]
      break;
 80022ce:	e002      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022d2:	613b      	str	r3, [r7, #16]
      break;
 80022d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d6:	693b      	ldr	r3, [r7, #16]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	007a1200 	.word	0x007a1200
 80022ec:	08002d38 	.word	0x08002d38
 80022f0:	08002d48 	.word	0x08002d48
 80022f4:	003d0900 	.word	0x003d0900

080022f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <RCC_Delay+0x34>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <RCC_Delay+0x38>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0a5b      	lsrs	r3, r3, #9
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002314:	bf00      	nop
  }
  while (Delay --);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1e5a      	subs	r2, r3, #1
 800231a:	60fa      	str	r2, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f9      	bne.n	8002314 <RCC_Delay+0x1c>
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	2000006c 	.word	0x2000006c
 8002330:	10624dd3 	.word	0x10624dd3

08002334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e041      	b.n	80023ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff f83c 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4610      	mov	r0, r2
 8002374:	f000 fa6e 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e035      	b.n	8002458 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a16      	ldr	r2, [pc, #88]	; (8002464 <HAL_TIM_Base_Start_IT+0x90>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d009      	beq.n	8002422 <HAL_TIM_Base_Start_IT+0x4e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002416:	d004      	beq.n	8002422 <HAL_TIM_Base_Start_IT+0x4e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_TIM_Base_Start_IT+0x94>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d111      	bne.n	8002446 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b06      	cmp	r3, #6
 8002432:	d010      	beq.n	8002456 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002444:	e007      	b.n	8002456 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40012c00 	.word	0x40012c00
 8002468:	40000400 	.word	0x40000400

0800246c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0202 	mvn.w	r2, #2
 8002498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f9b4 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f9a7 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f9b6 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0204 	mvn.w	r2, #4
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f98a 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f97d 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f98c 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b08      	cmp	r3, #8
 8002528:	d122      	bne.n	8002570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b08      	cmp	r3, #8
 8002536:	d11b      	bne.n	8002570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0208 	mvn.w	r2, #8
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f960 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f953 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f962 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b10      	cmp	r3, #16
 800257c:	d122      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d11b      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0210 	mvn.w	r2, #16
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2208      	movs	r2, #8
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f936 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f929 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f938 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0201 	mvn.w	r2, #1
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fcd2 	bl	8000f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b80      	cmp	r3, #128	; 0x80
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa6b 	bl	8002af2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8fc 	bl	8002840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b20      	cmp	r3, #32
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d107      	bne.n	8002674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0220 	mvn.w	r2, #32
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa36 	bl	8002ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_TIM_ConfigClockSource+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e0b4      	b.n	8002802 <HAL_TIM_ConfigClockSource+0x186>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d0:	d03e      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0xd4>
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d6:	f200 8087 	bhi.w	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	f000 8086 	beq.w	80027ee <HAL_TIM_ConfigClockSource+0x172>
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e6:	d87f      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d01a      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0xa6>
 80026ec:	2b70      	cmp	r3, #112	; 0x70
 80026ee:	d87b      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b60      	cmp	r3, #96	; 0x60
 80026f2:	d050      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x11a>
 80026f4:	2b60      	cmp	r3, #96	; 0x60
 80026f6:	d877      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b50      	cmp	r3, #80	; 0x50
 80026fa:	d03c      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0xfa>
 80026fc:	2b50      	cmp	r3, #80	; 0x50
 80026fe:	d873      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d058      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d86f      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b30      	cmp	r3, #48	; 0x30
 800270a:	d064      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 800270c:	2b30      	cmp	r3, #48	; 0x30
 800270e:	d86b      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b20      	cmp	r3, #32
 8002712:	d060      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002714:	2b20      	cmp	r3, #32
 8002716:	d867      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 800271c:	2b10      	cmp	r3, #16
 800271e:	d05a      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002720:	e062      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f000 f95e 	bl	80029f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	609a      	str	r2, [r3, #8]
      break;
 800274e:	e04f      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f000 f947 	bl	80029f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002772:	609a      	str	r2, [r3, #8]
      break;
 8002774:	e03c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	f000 f8be 	bl	8002904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2150      	movs	r1, #80	; 0x50
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f915 	bl	80029be <TIM_ITRx_SetConfig>
      break;
 8002794:	e02c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	461a      	mov	r2, r3
 80027a4:	f000 f8dc 	bl	8002960 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2160      	movs	r1, #96	; 0x60
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f905 	bl	80029be <TIM_ITRx_SetConfig>
      break;
 80027b4:	e01c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f000 f89e 	bl	8002904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f8f5 	bl	80029be <TIM_ITRx_SetConfig>
      break;
 80027d4:	e00c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f000 f8ec 	bl	80029be <TIM_ITRx_SetConfig>
      break;
 80027e6:	e003      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e000      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
	...

08002854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a25      	ldr	r2, [pc, #148]	; (80028fc <TIM_Base_SetConfig+0xa8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d007      	beq.n	800287c <TIM_Base_SetConfig+0x28>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002872:	d003      	beq.n	800287c <TIM_Base_SetConfig+0x28>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a22      	ldr	r2, [pc, #136]	; (8002900 <TIM_Base_SetConfig+0xac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <TIM_Base_SetConfig+0xa8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <TIM_Base_SetConfig+0x52>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d003      	beq.n	80028a6 <TIM_Base_SetConfig+0x52>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a17      	ldr	r2, [pc, #92]	; (8002900 <TIM_Base_SetConfig+0xac>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d108      	bne.n	80028b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <TIM_Base_SetConfig+0xa8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d103      	bne.n	80028ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	615a      	str	r2, [r3, #20]
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400

08002904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f023 0201 	bic.w	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f023 030a 	bic.w	r3, r3, #10
 8002940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	621a      	str	r2, [r3, #32]
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0210 	bic.w	r2, r3, #16
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800298a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	031b      	lsls	r3, r3, #12
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800299c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	621a      	str	r2, [r3, #32]
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	f043 0307 	orr.w	r3, r3, #7
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	609a      	str	r2, [r3, #8]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b087      	sub	sp, #28
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	021a      	lsls	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	609a      	str	r2, [r3, #8]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e041      	b.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a10      	ldr	r2, [pc, #64]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d10c      	bne.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400

08002ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <__errno>:
 8002b04:	4b01      	ldr	r3, [pc, #4]	; (8002b0c <__errno+0x8>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000078 	.word	0x20000078

08002b10 <__libc_init_array>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	2600      	movs	r6, #0
 8002b14:	4d0c      	ldr	r5, [pc, #48]	; (8002b48 <__libc_init_array+0x38>)
 8002b16:	4c0d      	ldr	r4, [pc, #52]	; (8002b4c <__libc_init_array+0x3c>)
 8002b18:	1b64      	subs	r4, r4, r5
 8002b1a:	10a4      	asrs	r4, r4, #2
 8002b1c:	42a6      	cmp	r6, r4
 8002b1e:	d109      	bne.n	8002b34 <__libc_init_array+0x24>
 8002b20:	f000 f8f6 	bl	8002d10 <_init>
 8002b24:	2600      	movs	r6, #0
 8002b26:	4d0a      	ldr	r5, [pc, #40]	; (8002b50 <__libc_init_array+0x40>)
 8002b28:	4c0a      	ldr	r4, [pc, #40]	; (8002b54 <__libc_init_array+0x44>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	42a6      	cmp	r6, r4
 8002b30:	d105      	bne.n	8002b3e <__libc_init_array+0x2e>
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b38:	4798      	blx	r3
 8002b3a:	3601      	adds	r6, #1
 8002b3c:	e7ee      	b.n	8002b1c <__libc_init_array+0xc>
 8002b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b42:	4798      	blx	r3
 8002b44:	3601      	adds	r6, #1
 8002b46:	e7f2      	b.n	8002b2e <__libc_init_array+0x1e>
 8002b48:	08002d4c 	.word	0x08002d4c
 8002b4c:	08002d4c 	.word	0x08002d4c
 8002b50:	08002d4c 	.word	0x08002d4c
 8002b54:	08002d50 	.word	0x08002d50

08002b58 <malloc>:
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <malloc+0xc>)
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	f000 b85f 	b.w	8002c20 <_malloc_r>
 8002b62:	bf00      	nop
 8002b64:	20000078 	.word	0x20000078

08002b68 <free>:
 8002b68:	4b02      	ldr	r3, [pc, #8]	; (8002b74 <free+0xc>)
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	f000 b80b 	b.w	8002b88 <_free_r>
 8002b72:	bf00      	nop
 8002b74:	20000078 	.word	0x20000078

08002b78 <memset>:
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4402      	add	r2, r0
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <memset+0xa>
 8002b80:	4770      	bx	lr
 8002b82:	f803 1b01 	strb.w	r1, [r3], #1
 8002b86:	e7f9      	b.n	8002b7c <memset+0x4>

08002b88 <_free_r>:
 8002b88:	b538      	push	{r3, r4, r5, lr}
 8002b8a:	4605      	mov	r5, r0
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	d043      	beq.n	8002c18 <_free_r+0x90>
 8002b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b94:	1f0c      	subs	r4, r1, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bfb8      	it	lt
 8002b9a:	18e4      	addlt	r4, r4, r3
 8002b9c:	f000 f8aa 	bl	8002cf4 <__malloc_lock>
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <_free_r+0x94>)
 8002ba2:	6813      	ldr	r3, [r2, #0]
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	b933      	cbnz	r3, 8002bb6 <_free_r+0x2e>
 8002ba8:	6063      	str	r3, [r4, #4]
 8002baa:	6014      	str	r4, [r2, #0]
 8002bac:	4628      	mov	r0, r5
 8002bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bb2:	f000 b8a5 	b.w	8002d00 <__malloc_unlock>
 8002bb6:	42a3      	cmp	r3, r4
 8002bb8:	d90a      	bls.n	8002bd0 <_free_r+0x48>
 8002bba:	6821      	ldr	r1, [r4, #0]
 8002bbc:	1862      	adds	r2, r4, r1
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	bf01      	itttt	eq
 8002bc2:	681a      	ldreq	r2, [r3, #0]
 8002bc4:	685b      	ldreq	r3, [r3, #4]
 8002bc6:	1852      	addeq	r2, r2, r1
 8002bc8:	6022      	streq	r2, [r4, #0]
 8002bca:	6063      	str	r3, [r4, #4]
 8002bcc:	6004      	str	r4, [r0, #0]
 8002bce:	e7ed      	b.n	8002bac <_free_r+0x24>
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	b10b      	cbz	r3, 8002bda <_free_r+0x52>
 8002bd6:	42a3      	cmp	r3, r4
 8002bd8:	d9fa      	bls.n	8002bd0 <_free_r+0x48>
 8002bda:	6811      	ldr	r1, [r2, #0]
 8002bdc:	1850      	adds	r0, r2, r1
 8002bde:	42a0      	cmp	r0, r4
 8002be0:	d10b      	bne.n	8002bfa <_free_r+0x72>
 8002be2:	6820      	ldr	r0, [r4, #0]
 8002be4:	4401      	add	r1, r0
 8002be6:	1850      	adds	r0, r2, r1
 8002be8:	4283      	cmp	r3, r0
 8002bea:	6011      	str	r1, [r2, #0]
 8002bec:	d1de      	bne.n	8002bac <_free_r+0x24>
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4401      	add	r1, r0
 8002bf4:	6011      	str	r1, [r2, #0]
 8002bf6:	6053      	str	r3, [r2, #4]
 8002bf8:	e7d8      	b.n	8002bac <_free_r+0x24>
 8002bfa:	d902      	bls.n	8002c02 <_free_r+0x7a>
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	602b      	str	r3, [r5, #0]
 8002c00:	e7d4      	b.n	8002bac <_free_r+0x24>
 8002c02:	6820      	ldr	r0, [r4, #0]
 8002c04:	1821      	adds	r1, r4, r0
 8002c06:	428b      	cmp	r3, r1
 8002c08:	bf01      	itttt	eq
 8002c0a:	6819      	ldreq	r1, [r3, #0]
 8002c0c:	685b      	ldreq	r3, [r3, #4]
 8002c0e:	1809      	addeq	r1, r1, r0
 8002c10:	6021      	streq	r1, [r4, #0]
 8002c12:	6063      	str	r3, [r4, #4]
 8002c14:	6054      	str	r4, [r2, #4]
 8002c16:	e7c9      	b.n	8002bac <_free_r+0x24>
 8002c18:	bd38      	pop	{r3, r4, r5, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000010c 	.word	0x2000010c

08002c20 <_malloc_r>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	1ccd      	adds	r5, r1, #3
 8002c24:	f025 0503 	bic.w	r5, r5, #3
 8002c28:	3508      	adds	r5, #8
 8002c2a:	2d0c      	cmp	r5, #12
 8002c2c:	bf38      	it	cc
 8002c2e:	250c      	movcc	r5, #12
 8002c30:	2d00      	cmp	r5, #0
 8002c32:	4606      	mov	r6, r0
 8002c34:	db01      	blt.n	8002c3a <_malloc_r+0x1a>
 8002c36:	42a9      	cmp	r1, r5
 8002c38:	d903      	bls.n	8002c42 <_malloc_r+0x22>
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	6033      	str	r3, [r6, #0]
 8002c3e:	2000      	movs	r0, #0
 8002c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c42:	f000 f857 	bl	8002cf4 <__malloc_lock>
 8002c46:	4921      	ldr	r1, [pc, #132]	; (8002ccc <_malloc_r+0xac>)
 8002c48:	680a      	ldr	r2, [r1, #0]
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	b99c      	cbnz	r4, 8002c76 <_malloc_r+0x56>
 8002c4e:	4f20      	ldr	r7, [pc, #128]	; (8002cd0 <_malloc_r+0xb0>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b923      	cbnz	r3, 8002c5e <_malloc_r+0x3e>
 8002c54:	4621      	mov	r1, r4
 8002c56:	4630      	mov	r0, r6
 8002c58:	f000 f83c 	bl	8002cd4 <_sbrk_r>
 8002c5c:	6038      	str	r0, [r7, #0]
 8002c5e:	4629      	mov	r1, r5
 8002c60:	4630      	mov	r0, r6
 8002c62:	f000 f837 	bl	8002cd4 <_sbrk_r>
 8002c66:	1c43      	adds	r3, r0, #1
 8002c68:	d123      	bne.n	8002cb2 <_malloc_r+0x92>
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	6033      	str	r3, [r6, #0]
 8002c70:	f000 f846 	bl	8002d00 <__malloc_unlock>
 8002c74:	e7e3      	b.n	8002c3e <_malloc_r+0x1e>
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	1b5b      	subs	r3, r3, r5
 8002c7a:	d417      	bmi.n	8002cac <_malloc_r+0x8c>
 8002c7c:	2b0b      	cmp	r3, #11
 8002c7e:	d903      	bls.n	8002c88 <_malloc_r+0x68>
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	441c      	add	r4, r3
 8002c84:	6025      	str	r5, [r4, #0]
 8002c86:	e004      	b.n	8002c92 <_malloc_r+0x72>
 8002c88:	6863      	ldr	r3, [r4, #4]
 8002c8a:	42a2      	cmp	r2, r4
 8002c8c:	bf0c      	ite	eq
 8002c8e:	600b      	streq	r3, [r1, #0]
 8002c90:	6053      	strne	r3, [r2, #4]
 8002c92:	4630      	mov	r0, r6
 8002c94:	f000 f834 	bl	8002d00 <__malloc_unlock>
 8002c98:	f104 000b 	add.w	r0, r4, #11
 8002c9c:	1d23      	adds	r3, r4, #4
 8002c9e:	f020 0007 	bic.w	r0, r0, #7
 8002ca2:	1ac2      	subs	r2, r0, r3
 8002ca4:	d0cc      	beq.n	8002c40 <_malloc_r+0x20>
 8002ca6:	1a1b      	subs	r3, r3, r0
 8002ca8:	50a3      	str	r3, [r4, r2]
 8002caa:	e7c9      	b.n	8002c40 <_malloc_r+0x20>
 8002cac:	4622      	mov	r2, r4
 8002cae:	6864      	ldr	r4, [r4, #4]
 8002cb0:	e7cc      	b.n	8002c4c <_malloc_r+0x2c>
 8002cb2:	1cc4      	adds	r4, r0, #3
 8002cb4:	f024 0403 	bic.w	r4, r4, #3
 8002cb8:	42a0      	cmp	r0, r4
 8002cba:	d0e3      	beq.n	8002c84 <_malloc_r+0x64>
 8002cbc:	1a21      	subs	r1, r4, r0
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f000 f808 	bl	8002cd4 <_sbrk_r>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d1dd      	bne.n	8002c84 <_malloc_r+0x64>
 8002cc8:	e7cf      	b.n	8002c6a <_malloc_r+0x4a>
 8002cca:	bf00      	nop
 8002ccc:	2000010c 	.word	0x2000010c
 8002cd0:	20000110 	.word	0x20000110

08002cd4 <_sbrk_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4d05      	ldr	r5, [pc, #20]	; (8002cf0 <_sbrk_r+0x1c>)
 8002cda:	4604      	mov	r4, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	f7fe fbd0 	bl	8001484 <_sbrk>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_sbrk_r+0x1a>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_sbrk_r+0x1a>
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	200001a4 	.word	0x200001a4

08002cf4 <__malloc_lock>:
 8002cf4:	4801      	ldr	r0, [pc, #4]	; (8002cfc <__malloc_lock+0x8>)
 8002cf6:	f000 b809 	b.w	8002d0c <__retarget_lock_acquire_recursive>
 8002cfa:	bf00      	nop
 8002cfc:	200001ac 	.word	0x200001ac

08002d00 <__malloc_unlock>:
 8002d00:	4801      	ldr	r0, [pc, #4]	; (8002d08 <__malloc_unlock+0x8>)
 8002d02:	f000 b804 	b.w	8002d0e <__retarget_lock_release_recursive>
 8002d06:	bf00      	nop
 8002d08:	200001ac 	.word	0x200001ac

08002d0c <__retarget_lock_acquire_recursive>:
 8002d0c:	4770      	bx	lr

08002d0e <__retarget_lock_release_recursive>:
 8002d0e:	4770      	bx	lr

08002d10 <_init>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr

08002d1c <_fini>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	bf00      	nop
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr
